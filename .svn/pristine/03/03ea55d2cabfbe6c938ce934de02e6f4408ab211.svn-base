package kr.or.ddit.works.approval.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import kr.or.ddit.security.RealUserWrapper;
import kr.or.ddit.works.approval.enums.AprvlLineStatus;
import kr.or.ddit.works.approval.service.ApprDocService;
import kr.or.ddit.works.approval.vo.AprvlDocVO;
import kr.or.ddit.works.organization.vo.EmployeeVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("/{companyNo}/box")
public class DocBoxController {
	
	@Autowired
	private ApprDocService apprDocSerive;
	
	/**
	 * 결재문서 목록을 조건에 따라 조회하는 메서드
	 *
	 * @param empId       로그인한 사용자의 사번 (결재자 또는 기안자)
	 * @param status      결재 상태 코드 (예: Draft, Waiting, Approved 등)
	 * @param isDrafter   true: 기안자 기준으로 조회 / false: 결재자 기준으로 조회
	 * @return            조건에 맞는 결재문서 리스트
	 */
	public List<AprvlDocVO> getApprovalDocsByCondition(String empId, String status) {
	    Map<String, Object> searchCondition = new HashMap<>();
	    searchCondition.put("empId", empId);
	    searchCondition.put("status", status);

	    return apprDocSerive.selectApprDocStatusList(searchCondition);
	}
	
	/**
	 * 기안문서함 - 기안문서 전체 조회
	 * @param companyNo
	 * @param model
	 * @return
	 */
	@GetMapping("draftDocs")
	public String selectDraftList(
		@PathVariable("companyNo") String companyNo
		, Authentication authentication
		, Model model
	) {
		model.addAttribute("companyNo", companyNo);
		
		// 로그인한 사용자 정보 조회
	    RealUserWrapper userDetails = (RealUserWrapper) authentication.getPrincipal();
	    log.info("userDeatils : {}", userDetails);
	    EmployeeVO realUser = (EmployeeVO) userDetails.getRealUser();
	    String loginEmpId = realUser.getEmpId();
	    
	    List<AprvlDocVO> draftDocs = getApprovalDocsByCondition(loginEmpId, AprvlLineStatus.Draft.getCode());
	    log.info("draftDocs:{}",draftDocs);
	    
	    model.addAttribute("draftDocs",draftDocs);
		
		return "gw:appr/boxDraftDocList";
	}
	
	/**
	 * 임시 저장함 - 임시저장된 문서 전체 조회
	 * @param companyNo
	 * @param model
	 * @return
	 */
	@GetMapping("tempDocs")
	public String selectTempSaveList(
		@PathVariable("companyNo") String companyNo
		, Model model
	) {
		return "gw:appr/boxTempSaveList";
	}
	
	/**
	 * 결재 문서함 - 결재한 문서 전체 조회
	 * @param companyNo
	 * @param model
	 * @return
	 */
	@GetMapping("apprDocs")
	public String selectApprDocList(
		@PathVariable("companyNo") String companyNo
		, Model model
	) {
		model.addAttribute("companyNo", companyNo);
		return "gw:appr/boxApprDocList";
	}
	
	/**
	 * 참조/열람 문서함 - 참조/열람 가능한 문서 전체 조회
	 * @param companyNo
	 * @param model
	 * @return
	 */
	@GetMapping("refDocs")
	public String selectRefDocList(
		@PathVariable("companyNo") String companyNo
		, Model model
	) {
		model.addAttribute("companyNo", companyNo);
		return "gw:appr/boxRefDocList";
	}
	
	@GetMapping("depDocs")
	public String selectDepDocList(
		@PathVariable("companyNo") String companyNo
		, Model model
	) {
		model.addAttribute("companyNo", companyNo);
		return "gw:appr/departmentDocList";
	}
}
