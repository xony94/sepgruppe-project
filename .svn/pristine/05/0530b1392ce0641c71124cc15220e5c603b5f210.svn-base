package kr.or.ddit.works.mail.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.works.mail.service.MailService;
import kr.or.ddit.works.mail.vo.MailReceptionVO;

@Controller
@RequestMapping("/{companyNo}/mail")
public class MailController {

	@Autowired
	private MailService mailService;
	
	@GetMapping("") //메일함 메인 겸 받은메일함
	public String getMailList(@PathVariable("companyNo") String companyNo
			, Model model) throws Exception {
			List<MailReceptionVO> mailList = mailService.getMailList();
			model.addAttribute("mailList", mailList);
			model.addAttribute("companyNo", companyNo);
		return "gw:mail/mailList";
	}
	
	@GetMapping("/mySentMail") //보낸메일함
	public String getSentMailList(@PathVariable("companyNo") String companyNo
			, Model model) throws Exception {
			List<MailReceptionVO> sentMailList = mailService.getSentMailList();
			model.addAttribute("sentMailList", sentMailList);
			model.addAttribute("companyNo", companyNo);
		return "gw:mail/sentList";
	}	
	
	@GetMapping("/mailContent/{mailId}") //받은메일 상세보기
	public String getMailContent(@PathVariable("companyNo") String companyNo,
	                             @PathVariable("mailId") String mailId,
	                             Model model) throws Exception {
	    String mailContent = mailService.getMailContent(mailId);
	    model.addAttribute("mailContent", mailContent);
	    model.addAttribute("mailId", mailId);
	    model.addAttribute("companyNo", companyNo);
	    return "gw:mail/mailContent";
	}
	
	@GetMapping("/sentMailContent/{mailId}") //보낸메일 상세보기
	public String getSentMailContent(@PathVariable("companyNo") String companyNo,
	                             @PathVariable("mailId") String mailId,
	                             Model model) throws Exception {
	    String sentMailContent = mailService.getSentMailContent(mailId);
	    model.addAttribute("sentMailContent", sentMailContent);
	    model.addAttribute("mailId", mailId);
	    model.addAttribute("companyNo", companyNo);
	    return "gw:mail/sentMailContent";
	}
	
	@GetMapping("/favorites")
	public String showFavoriteMailPage(@PathVariable("companyNo") String companyNo,
	                                   HttpServletRequest request,
	                                   Model model) {
	    String empId = (String) request.getSession().getAttribute("empId");
	    List<MailReceptionVO> favoriteList = mailService.getFavoriteMailList(empId);
	    model.addAttribute("mailList", favoriteList); // JSP에서 mailList로 꺼냄

	    // 필요하면 JSON으로도 넘기기
	    ObjectMapper mapper = new ObjectMapper();
	    try {
	        String mailListJson = mapper.writeValueAsString(favoriteList);
	        model.addAttribute("mailListJson", mailListJson);
	    } catch (JsonProcessingException e) {
	        model.addAttribute("mailListJson", "[]");
	    }

	    return "gw:mail/mailFavorite";
	}

	
	@GetMapping("/favorites/list")
	@ResponseBody
	public List<MailReceptionVO> getFavoriteMailList(@PathVariable("companyNo") String companyNo,
	                                                 HttpServletRequest request) {
	    String empId = (String) request.getSession().getAttribute("empId");
	    return mailService.getFavoriteMailList(empId);
	}
	
	@PostMapping("/favorites/add")
    @ResponseBody
    public String addFavorite(@PathVariable("companyNo") String companyNo,
                             @RequestParam String mailId,
                             HttpServletRequest request) throws Exception {
        String empId = (String) request.getSession().getAttribute("empId");
        mailService.addFavorite(empId, mailId);
        return "success";
    }

    @PostMapping("/favorites/remove")
    @ResponseBody
    public String removeFavorite(@PathVariable("companyNo") String companyNo,
                                @RequestParam String mailId,
                                HttpServletRequest request) throws Exception {
        String empId = (String) request.getSession().getAttribute("empId");
        mailService.removeFavorite(empId, mailId);
        return "success";
    }
    
    


}
