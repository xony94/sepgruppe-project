    // 서버에서 전달한 값이 없으면 기본값 설정
    var roomId = null;
    const userName = $('#myId').data('id');
    const empName = $('#myId').data('name');
    var senderEmail = "";
	var lastDisplayedTime = "";
    var stompClient = null;
	
	// 서버에서 전달한 subscribedRooms가 없으면 빈 배열로 초기화
	var subscribedRooms = (typeof subscribedRooms !== 'undefined') ? subscribedRooms : [];
	// 각 roomId별 구독 객체를 저장할 객체
	var subscriptions = {};
    
	function chatApp(){
		// 엔터키로 메시지 전송 (Shift+Enter는 줄바꿈)
       $("#messageInput").on("keypress", function(event){
           if(event.key === "Enter" && !event.shiftKey){
               event.preventDefault();
               sendMessage();
           }
       });
       // 전송 버튼 클릭 시 메시지 전송
       $("#sendBtn").click(function(){
           sendMessage();
       });
	}
	
    // STOMP 연결 함수
	function connect() {
		var socket = new SockJS("/sep/stomp");
		stompClient = Stomp.over(socket);
		stompClient.connect({}, function(frame) {
			console.log("Connected: " + frame);
			// 채팅방 구독: 서버에서 /topic/{roomId}로 메시지 브로드캐스트
			if (subscribedRooms && subscribedRooms.length > 0) {
				subscribedRooms.forEach(function(room) {
					subscribeToChatRoom(room.roomId);
				});
			}
	
			// 만약 현재 활성화된 roomId가 있으면 (예: 새로 선택한 채팅방)
			if (roomId) {
				subscribeToChatRoom(roomId);
			}
		}, function(error) {
	            console.error("STOMP 연결 에러: ", error);
	        });
	    }
	
    // 메시지 전송 함수
    function sendMessage() {
        var messageInput = document.getElementById("messageInput");
        var messageText = messageInput.value.trim();
        if(messageText !== "" && stompClient && stompClient.connected) {
            var chatMessage = {
                msgId: Date.now(),
                senderEmpId: userName,
                senderEmail: empName,
                msgContent: messageText,
				sendTime:new Date().toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit' }),
                roomId: roomId
            };
            // 서버의 메시지 핸들러로 전송 (/app/{roomId} 경로 사용)
            stompClient.send("/app/" + roomId, {}, JSON.stringify(chatMessage));
            messageInput.value = "";
        }
    }
    
    // 수신한 메시지를 채팅창에 추가
    function showMessage(message) {
        var chatBox = document.getElementById("chatBox");
        var li = document.createElement("li");
        // 본인이 보낸 메시지와 타인의 메시지 구분
        if(message.senderEmpId === userName){
            li.className = "chat-right";
        } else {
            li.className = "chat-left";
        }
		var timeHTML = "";
	    if (message.sendTime !== lastDisplayedTime) {
	        timeHTML = message.sendTime + ' <span class="fa fa-check-circle"></span>';
	        lastDisplayedTime = message.sendTime; // 시간이 바뀌었으므로 업데이트
	    }
		li.innerHTML = '<div class="chat-hour">' + timeHTML + '</div>' +
		        '<div class="chat-avatar">' +
		            '<img src="https://www.bootdey.com/img/Content/avatar/avatar3.png" alt="Avatar" />' +
		            '<div class="chat-name">' + (message.senderEmpId || message.sender) + '</div>' +
		        '</div>' +
		        '<div class="chat-text">' + message.msgContent + '</div>';
        chatBox.appendChild(li);
        // 스크롤을 맨 아래로 이동
        chatBox.scrollTop = chatBox.scrollHeight;
    }
    
	// 개별 채팅방 구독 함수
	function subscribeToChatRoom(roomId) {
	    if (stompClient && stompClient.connected) {
	        // 이미 해당 채팅방에 대해 구독 중이면 재구독하지 않음
	        if (subscriptions[roomId]) {
	            console.log("이미 구독 중인 채팅방:", roomId);
	            return;
	        }
	        // 구독하고 subscription 객체를 저장
	        subscriptions[roomId] = stompClient.subscribe("/topic/" + roomId, function(message) {
	            showMessage(JSON.parse(message.body));
	        });
	        console.log("Subscribed to chat room:", roomId);
	    }
	}
	
    // 페이지 로드 시 STOMP 연결 및 이벤트 바인딩
    $(document).ready(function(){
        connect();
		chatApp();
    });
	
	$(document).on("click", "li.chat-room-row", function(){
	    var selectedRoomId = $(this).data("roomid");
	    roomId = selectedRoomId;  // 전역 roomId 변수에 선택된 값을 할당
	    subscribeToChatRoom(roomId);

	    // AJAX 요청을 통해 해당 채팅방 UI(JSP)를 로드합니다.
	    $.ajax({
	        type: "GET",
	        url: "/sep/chat/" + roomId,
	        success: function(jspContent) {
	            // 채팅 UI를 #depTree 영역에 삽입
	            $("#depTree").empty().html(jspContent);
	            chatApp(); // 채팅 전송 이벤트 재바인딩
	            $(document).off("click", "#sendBtn").on("click", "#sendBtn", function(){
	                sendMessage();
	            });
				$("#chatBox").scrollTop($("#chatBox").prop("scrollHeight"));
	        },
	        error: function(xhr, status, error) {
	            console.error("채팅 UI 로드 실패:", error);
	        }
	    });
	});
	
    // 페이지 종료 시 연결 해제
    window.onbeforeunload = function(){
        if(stompClient) {
            stompClient.disconnect();
        }
    };
	
	
	
// ===================================================================================================



	$(document).ready(function(){
	$("#depTree").fancytree({
	    source: {
	        url:"/sep/testnum001" + "/organization/admin/parentDep",
	        cache: false
	    },
	    lazyLoad: function(event, data) {
	        var node = data.node;
	        let mode = "employee";
	        if (!node.data.parentDeptCd) {
	            mode = "department";
	        }
	        // Load child nodes via Ajax
	        data.result = {
	            url:  "/sep/testnum001" + "/organization/admin/childeDep",
	            data: {mode: mode, parent: node.key},
	            cache: false
	        };
	    },
	    renderNode: function(event, data) {
	        var node = data.node;
	        var $span = $(node.span);
	     
	     // 기존 아이콘 제거 (중복 방지)
	     $span.find(".fancytree-icon").remove();
	        if (node.data.empNm) {
	            // 사원 노드
	        const isManager = node.parent && node.parent.data.managerEmpId === node.data.empId;

	          const iconClass = isManager ? "fas fa-user-tie" : "fas fa-user";
	          const iconHtml = `<i class="${iconClass} fancytree-icon"></i>`;

	          $span.find(".fancytree-title").html(
	              `${iconHtml} ${node.data.empNm} (${node.data.positionName}) (${node.data.empId})`
	          );
			  
	     } else {
	           // 부서 노드
	           $span.find(".fancytree-title").prepend(
	               `<i class="fas fa-building fancytree-icon"></i> `
	           );  
	        }
	    },
		activate: function(event, data) {
			var node = data.node;
			if (node.data.empNm) {
				// 사원 정보 표시
				var myUsername = userName; // 전역 변수 (현재 로그인 사용자명)
				var empId = node.data.empId;
				var ids = [myUsername, empId].sort();
				roomId = ids.join("_");
				subscribeToChatRoom(roomId);

				$.ajax({
					type: "POST",
					url: "/sep/testnum001/chat/register",  // 이 URL은 여러분이 구현한 API 엔드포인트
					contentType: "application/json",
					data: JSON.stringify({
						createEmpId: myUsername,
						roomId: roomId
					}),
					success: function(response) {
						console.log("채팅방 참여 등록 성공:", response);

						$.ajax({
							type: "GET",  // 필요에 따라 POST로 변경 가능
							url: "/sep/chat/"+roomId,  // 받아올 JSP 페이지의 URL로 변경하세요
							success: function(jspContent) {
								// 기존 조직도 제거 후, 받아온 JSP 내용을 #depTree에 삽입
								$("#depTree").empty().html(jspContent);
								chatApp();
								$(document).on("click", "#sendBtn", function(){
								    sendMessage();
								});
							},
							error: function(xhr, status, error) {
								console.error("JSP 페이지 로딩 실패:", error);
							}
						});
					},
					error: function(xhr, status, error) {
						console.error("채팅방 참여 등록 실패:", error);
					}

				});
	        }
	    }
	});

	});
	