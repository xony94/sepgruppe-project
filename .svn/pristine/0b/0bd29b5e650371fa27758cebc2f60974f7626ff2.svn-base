package kr.or.ddit.works.chat.controller;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.simp.annotation.SendToUser;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.security.RealUserWrapper;
import kr.or.ddit.works.chat.service.ChatService;
import kr.or.ddit.works.chat.vo.ChatRoomUserVO;
import kr.or.ddit.works.chat.vo.ChatRoomVO;
import kr.or.ddit.works.mybatis.mappers.EmployeeMapper;
import kr.or.ddit.works.organization.vo.EmployeeVO;

/**
 * 채팅 컨트롤러
 * 
 * @author JYS
 * @since 2025. 3. 14.
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 14.     	JYS	          최초 생성
 *
 * </pre>
 */
@Controller
@RequestMapping("/{companyNo}/chat")
public class ChatController {
	
	@Autowired
	private ChatService chatService;
	
	@Autowired
	private EmployeeMapper empMapper;
	
	@GetMapping("")
	public String ChatHome(@PathVariable ("companyNo") String companyNo
		, Model model
		, Authentication authentication
	) throws JsonProcessingException {
		String empId = authentication.getName();
		Object principal = authentication.getPrincipal();
		
		if (principal instanceof RealUserWrapper) { 
	        RealUserWrapper wrapper = (RealUserWrapper) principal;
	        Object realUser = wrapper.getRealUser();

	        if (realUser instanceof EmployeeVO) { 
	        	EmployeeVO user = (EmployeeVO) realUser;
	        	String userName = user.getEmpNm();
	        	model.addAttribute("userName", userName);
	        }
		}
		
		List<ChatRoomUserVO> rooms = chatService.selectListAllChatRoom(empId);
		model.addAttribute("rooms", rooms);
		ObjectMapper mapper = new ObjectMapper();
	    String roomsJson = mapper.writeValueAsString(rooms);
	    model.addAttribute("roomsJson", roomsJson);
	    
		model.addAttribute("empId", empId);
		model.addAttribute("companyNo", companyNo);
		
		return "/groupware/chat/messenger";
	}
	
	@PostMapping("/register")
    public ResponseEntity<?> registerChatRoomMembership(@RequestBody ChatRoomVO chatRoom) {
        // membership 객체에는 userId, chatRoomId 등이 포함됨
		String myId = chatRoom.getCreateEmpId();
		String setId = chatRoom.getRoomId().replace(myId, "").replace("_", "");
		String myName = empMapper.selectEmployee(myId).getEmpNm();
		String setName = empMapper.selectEmployee(setId).getEmpNm();
		ChatRoomUserVO roomUser1 = new ChatRoomUserVO();
		ChatRoomUserVO roomUser2 = new ChatRoomUserVO();
		
		chatRoom.setRoomName(myName+","+setName);
		
		roomUser1.setEmpId(myId);
		roomUser1.setRoomId(chatRoom.getRoomId());
		roomUser2.setEmpId(setId);
		roomUser2.setRoomId(chatRoom.getRoomId());
		chatService.insertChatRoom(chatRoom);
		chatService.insertChatRoomUser(roomUser1);
		chatService.insertChatRoomUser(roomUser2);
		
        return ResponseEntity.ok("등록 성공");
    }
	
	@MessageMapping("/chat.createRoom")
    @SendToUser("/queue/roomCreated")
    public ChatRoomVO createRoom(@Payload ChatRoomVO roomRequest) {
        // ChatRoomRequest에는 채팅방 이름, 생성자 정보 등이 포함됨
		chatService.insertChatRoom(roomRequest);
		
        return roomRequest;
    }
	
	
	// 본인이 속해있는 채팅방 목록 조회
	@GetMapping("room")
	public String selectListAllChatRoom(
		@PathVariable("companyNo") String companyNo
		, Model model
	) {
		model.addAttribute("companyNo", companyNo);
		return "gw:chat/chatList";
	}
	
	//채팅방입장
	@GetMapping("{roomId}")
	public String selectChatRoomDetail(
		@Param("roomId") String roomId
		, Model model
	) {
		model.addAttribute("roomId", roomId);
		return "gw:chat/chatDetail";
	}
	
	//채팅방 생성 폼UI
	@GetMapping("new")
	public String insertChatRoomFormUI(
		@Param("companyNo") String companyNo
		, Model model
	) {
		model.addAttribute("companyNo", companyNo);
		return "gw:chat/chatForm";
	}
	
	//채팅방 생성
	@PostMapping("new")
	public String insertChatRoom(
		@Param("companyNo") String companyNo
		, Model model
	) {
		model.addAttribute("companyNo", companyNo);
		return "gw:chat/chatForm";
	}

}
