package kr.or.ddit.works.organization.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.paging.PaginationInfo;
import kr.or.ddit.paging.PaginationRenderer;
import kr.or.ddit.paging.SimpleCondition;
import kr.or.ddit.security.RealUserWrapper;
import kr.or.ddit.works.login.vo.AllUserVO;
import kr.or.ddit.works.organization.service.EmployeeService;
import kr.or.ddit.works.organization.vo.DepartmentVO;
import kr.or.ddit.works.organization.vo.EmployeeVO;
import kr.or.ddit.works.organization.vo.OrganizationVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 인사관리 컨트롤러
 *
 * @author JYS
 * @since 2025. 3. 13.
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 13.     	JYS	          최초 생성
 *
 * </pre>
 */
@Slf4j
@Controller
@RequestMapping("/{companyNo}/employee")
public class EmployeeController {

	@Autowired
	private EmployeeService service;
	
	@Autowired
	private PaginationRenderer paginationRenderer;

    /** 관리자 - 전사 인사정보 조회 */
    /** 권한을 부여받은 자 - 각 부서 사원 인사정보 조회 */
    @GetMapping("/admin/list")
    public String selectListAllEmployee(
    	@PathVariable("companyNo") String companyNo
    	, @RequestParam(defaultValue = "1") int page
    	, @ModelAttribute SimpleCondition simpleCondition
    	, Model model
    ) {
    	PaginationInfo<OrganizationVO> pageData = service.getAllEmployees(companyNo, page, simpleCondition);
        String paginationHtml = paginationRenderer.renderPagination(pageData);

        model.addAttribute("pageData", pageData);
        model.addAttribute("paginationHtml", paginationHtml);
        model.addAttribute("simpleCondition", simpleCondition);

        return "gw:admin/employee/employeeList";
    }

    /** 관리자 - 상세 인사정보 조회 */
    /** 권한을 부여받은 자 - 각 부서 사원 인사정보 조회 */
    @GetMapping("/{empNo}")
    public String selectEmployee(@PathVariable("companyNo") String companyNo, @PathVariable("empNo") String empNo) {
        return "gw:employee/employeeDetail";
    }
    
    @GetMapping("/departments")
    @ResponseBody
    public List<DepartmentVO> getDepartments(@PathVariable("companyNo") String companyNo) {
        return service.selectDepartments(companyNo);
    }

    /** 관리자 - 인사 정보 등록 폼 */
//    @GetMapping("/new")
//    public String insertEmployeeFormUI(@PathVariable("companyNo") String companyNo) {
//        return "gw:admin/employee/employeeForm";
//    }

    /** 관리자 - 인사 정보 등록 */
    @PostMapping("/new")
    @ResponseBody
    public ResponseEntity<?> insertEmployee(
        @PathVariable("companyNo") String companyNo,
        @ModelAttribute EmployeeVO member
    ) {
        member.setCompanyNo(companyNo);
        int result = service.insertEmployee(member);

        return result > 0 ? ResponseEntity.ok().build()
                          : ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    }

    /** 관리자 - 인사 정보 수정 폼 */
    @GetMapping("/{empNo}/edit")
    public String updateEmployeeFormUI(@PathVariable("companyNo") String companyNo, @PathVariable("empNo") String empNo) {
        return "gw:employee/employeeEdit";
    }

    /** 관리자 - 인사 정보 수정 */
    @PutMapping("/{empNo}/edit")
    public String updateEmployee(@PathVariable("companyNo") String companyNo, @PathVariable("empNo") String empNo) {
        return "redirect:/" + companyNo + "/employee/" + empNo;
    }

    /** 관리자 - 인사 정보 삭제(퇴사 처리) (비활성화) */
    @PutMapping("/{empNo}/deactivate")
    public String deactivateEmployee(@PathVariable("companyNo") String companyNo, @PathVariable("empNo") String empNo) {
        // 삭제 처리 로직 추가 (비활성화 처리)
        return "redirect:/" + companyNo + "/employee";
    }

    /** 관리자 - 인사 관리 권한 설정 */

    /** 사원 - 내 인사 정보 조회 */
    @GetMapping("/myEmployee")
    public String selectMyEmployee(
    		@PathVariable("companyNo") String companyNo
    		, Authentication authentication
        	, Model model
    ) {
    	EmployeeVO member = service.selectEmployee(authentication.getName());
    	model.addAttribute("member", member);
    	return "gw:employee/myEmployee";
    }

    /** 사원 마이페이지 */
    @GetMapping("/mypage")
    public String selectMyPage(
    	@PathVariable("companyNo") String companyNo
    	, Authentication authentication
    	, Model model
    	) {

			EmployeeVO member = service.selectEmployee(authentication.getName()); // 추가함
			model.addAttribute("member", member);
    	return "gw:employee/myPage";
    }

	/** 사원 마이페이지 정보 수정 */
	@PostMapping("/mypage/edit")
	public String updateEmployee(
			Authentication authentication
			, @PathVariable("companyNo") String companyNo
			, @ModelAttribute("member") EmployeeVO member
			, HttpSession session
		) {
		member.setEmpId(authentication.getName());


			service.updateEmployee(member);

			session.setAttribute("authMember", service.selectEmployee(member.getEmpId()));


		return "redirect:/{companyNo}/employee/mypage";
	}

	/** 사원 마이페이지 프로필 사진 삭제 */
	@PostMapping("/deleteImg")
	public void deleteImage(@RequestParam("empId") String empId) {
		log.info("이미지삭제 실행 ==================");
		service.deleteImage(empId);
	}

	@PostMapping("/mypage/verifyPassword")
	public ResponseEntity<Object> verifyPassword(
			Authentication authentication
			, @RequestBody EmployeeVO emp
		) {
		System.out.println("======================= 검증중 =======================");
	    String empId = authentication.getName();

	    boolean checkPw = service.authenticateMember(empId, emp.getEmpPw()); // 비밀번호 검증 호출

	        // 비밀번호 인증 로직 호출
	    if(checkPw)
	        return ResponseEntity.ok().build(); // 인증 성공
	    else
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build(); // 인증 실패
	}
}








