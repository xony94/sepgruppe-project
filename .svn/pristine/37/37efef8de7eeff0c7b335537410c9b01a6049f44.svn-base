package kr.or.ddit.works.notice.service;

import java.io.File;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.paging.PaginationInfo;
import kr.or.ddit.paging.SimpleCondition;
import kr.or.ddit.works.common.vo.AttachFileVO;
import kr.or.ddit.works.mybatis.mappers.NoticeMapper;
import kr.or.ddit.works.notice.vo.NoticeVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class NoticeServiceImpl implements NoticeService {

	@Autowired
	private NoticeMapper mapper;

	@Value("#{fileInfo.attachFiles}")
	private String noticeFileUrl;
	@Value("#{fileInfo.attachFiles}")
	private Resource noticeFileRes;
	@Value("#{fileInfo.attachFiles}")
	private File noticeFileFolder;

	// 파일 업로드 메서드
	public void profileImage(AttachFileVO file) {
		try {
			MultipartFile noticeFile = file.getAttachFile();
			if(noticeFile == null) return;

			String filePath = file.getAttachFilePath();
			File destFile = new File(noticeFileFolder, filePath);
			noticeFile.transferTo(destFile);

		} catch (Exception e) {
			throw new RuntimeException();
		}
	}

	/**
	 * 단순 공지사항 전체 조회
	 * @param noticeVo
	 * @return
	 */
	@Override
	public NoticeVO basicSelectAll(int noticeNo) {
		return mapper.basicSelectAll(noticeNo);
	}

	/**
	 * 공지사항 전체 조회
	 * @param paging
	 * @return
	 */
	@Override
	public List<NoticeVO> selectAllNotice(PaginationInfo<NoticeVO> paging) {
		return mapper.selectAllNotice(paging);
	}

	/**
	 * 페이징 처리를 위한 전체 레코드수 조회
	 * @return
	 */
	@Override
	public int selectAllNoticeTotalRecord(PaginationInfo<NoticeVO> paging) {
		return mapper.selectAllNoticeTotalRecord(paging);
	}

	/**
	 * 공지사항 등록
	 * @param notice
	 * @return
	 */
	@Override
	public boolean insertNotice(NoticeVO notice) {
		return mapper.insertNotice(notice) > 0;
	}

	/**
	 * 임시저장 글 불러오기
	 * @param empId
	 * @return
	 */
	@Override
	public List<NoticeVO> isDraftList(String empId) {
		return mapper.isDraftList(empId);
	}

	/**
	 * 임시저장 글 개수 가져오기
	 * @param empId
	 * @return
	 */
	@Override
	public int isDraftCnt(String empId) {
		return mapper.isDraftCnt(empId);
	}

	/**
	 * 공지사항 삭제
	 * @param empid
	 * @return
	 */
	@Override
	public boolean deleteNotice(Map<String, Object> params) {
		return mapper.deleteNotice(params) > 0;
	}

	/**
	 * 공지사항 수정
	 * @param params
	 * @return
	 */
	@Override
	public boolean updateNotice(NoticeVO notice) {
		return mapper.updateNotice(notice) > 0;
	}

	/**
	 * 공지사항 조회수 증가
	 * @param noticeNo
	 * @return
	 */
	@Override
	public int noticeViewCnt(int noticeNo) {
		return mapper.noticeViewCnt(noticeNo);
	}

	/**
	 * 공지사항 파일 업로드
	 * @param empId
	 * @return
	 */
	@Override
	public boolean insertNoticeFile(Map<String, Object> fileMap) {
	    List<AttachFileVO> fileList = (List<AttachFileVO>) fileMap.get("fileList");

	    if (fileList == null || fileList.isEmpty()) {
	        return false; // 파일이 없으면 종료
	    }

	    // 파일 정보를 DB에 저장
	    if (mapper.insertNoticeFile(fileMap) > 0) {
	        for (AttachFileVO file : fileList) {
	            profileImage(file); // 실제 파일 저장
	        }
	        return true;
	    } else {
	        return false;
	    }
	}
}