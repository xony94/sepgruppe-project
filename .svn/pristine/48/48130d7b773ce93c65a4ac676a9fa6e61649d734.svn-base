package kr.or.ddit.works.reservation.controller;

import java.time.LocalDate; // LocalDate 추가
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.works.reservation.service.ReservationService;
import kr.or.ddit.works.reservation.vo.ReservationVO;

/**
 * 주소록 컨트롤러
 * @author JYS
 * @since 2025. 3. 15.
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 15.     	JYS	          최초 생성
 *  2025. 3. 17.  		KKM  		  개발 중
 *
 * </pre>
 */
@Controller
@RequestMapping("/{companyNo}/reservation")
public class ReservationController {

    @Autowired
    private ReservationService reservationService;

    // 전체 예약 목록 및 오늘의 예약 현황 조회 (HTML 페이지)
    @GetMapping("")
    public String selectListAllReservation(@PathVariable("companyNo") String companyNo, Model model, HttpSession session) {
        String empId = (String) session.getAttribute("loggedInEmpId"); // 세션에서 로그인한 사원 ID 가져오기
        model.addAttribute("companyNo", companyNo);
        model.addAttribute("empId", empId); // 사원 ID를 모델에 추가

        LocalDate today = LocalDate.now();
        List<ReservationVO> todayReservations = reservationService.getReservationsByDate(today);
        model.addAttribute("todayReservations", todayReservations); // 오늘의 예약 현황 추가

        return "gw:reservation/reservationList"; // JSP 경로
    }

    @GetMapping("/api")
    @ResponseBody
    public List<ReservationVO> getAllReservations(@PathVariable("companyNo") String companyNo) {
        return reservationService.selectListAllReservation(); // 모든 예약 정보를 반환
    }

    // 예약 상세 조회
    @GetMapping("/{reservationNo}")
    public String selectReservationDetail(@PathVariable("reservationNo") String reservationNo, Model model) {
        ReservationVO reservation = reservationService.selectReservationDetail(reservationNo);
        model.addAttribute("reservation", reservation);
        return "gw:reservation/reservationList"; // 예약 상세 페이지
    }

    // 예약 등록 - 폼 UI
    @GetMapping("/new")
    public String insertReservationFormUI(Model model) {
        return "gw:reservation/reservationForm"; // 예약 추가 페이지
    }

    @PostMapping("/new")
    public String insertReservation(ReservationVO reservation, Model model) {
        if (reservationService.insertReservation(reservation)) {
            return "redirect:/reservation"; // 추가 후 예약 목록 페이지로 리다이렉트
        } else {
            model.addAttribute("error", "예약이 충돌했습니다."); // 오류 메시지 추가
            return "gw:reservation/reservationForm"; // 다시 추가 페이지로 리다이렉트
        }
    }

    // 수정 - 폼 UI
    @GetMapping("/{reservationNo}/edit")
    public String updateReservationFormUI(@PathVariable("reservationNo") String reservationNo, Model model) {
        ReservationVO reservation = reservationService.selectReservationDetail(reservationNo);
        model.addAttribute("reservation", reservation);
        return "gw:reservation/editReservation"; // 예약 수정 페이지
    }

    // 예약 수정
    @PostMapping("/{reservationNo}/edit")
    public String updateReservation(ReservationVO reservation) {
        reservationService.updateReservation(reservation);
        return "redirect:/reservation"; // 수정 후 예약 목록 페이지로 리다이렉트
    }

    // 예약 삭제
    @DeleteMapping("/{reservationNo}/delete")
    public String deleteReservation(@PathVariable("reservationNo") String reservationNo) {
        reservationService.deleteReservation(reservationNo);
        return "redirect:/reservation"; // 삭제 후 예약 목록 페이지로 리다이렉트
    }

    // 특정 날짜의 예약 현황 조회 (FullCalendar용)
    @GetMapping("/api/status/{date}")
    @ResponseBody
    public List<ReservationVO> getReservationsByDate(@PathVariable("date") LocalDate reservationDate) {
        return reservationService.getReservationsByDate(reservationDate); // 특정 날짜의 예약 현황 반환
    }

    // 오늘의 예약 현황을 시간대별로 정리하여 JSP에 전달
    @GetMapping("/today/grouped")
    public String getTodayReservationsGrouped(@PathVariable("companyNo") String companyNo, Model model) {
        LocalDate today = LocalDate.now();
        List<ReservationVO> todayReservations = reservationService.getReservationsByDateGrouped(today);
        model.addAttribute("todayReservationsGrouped", todayReservations);
        model.addAttribute("companyNo", companyNo);
        return "gw:reservation/reservationList"; // 시간대별로 그룹화된 JSP 경로
    }
    
    // 로그인한 사용자의 예약 현황 조회
    @GetMapping("/my-reservations")
    public String getMyReservations(@PathVariable("companyNo") String companyNo, Model model) {
        // 로그인한 사용자 정보 가져오기
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        System.out.println("Authentication: " + authentication);

        Object principal = authentication.getPrincipal();
        System.out.println("Principal: " + principal);
        System.out.println("Principal Type: " + principal.getClass().getName());

        String empId = null;
        if (principal instanceof UserDetails) {
            empId = ((UserDetails) principal).getUsername(); // username을 empId로 사용
        } else if (principal instanceof String) {
            empId = (String) principal; // 사용자 ID가 문자열인 경우
        }

        if (empId == null) {
            // empId가 null인 경우, 에러 처리 또는 로그인 페이지로 리다이렉트
            return "redirect:/login"; // 예시
        }

        model.addAttribute("companyNo", companyNo);
        model.addAttribute("empId", empId); // 사원 ID를 모델에 추가

        // 사용자의 예약 내역 가져오기
        List<ReservationVO> myReservations = reservationService.getMyReservationsByEmpId(empId);
        model.addAttribute("myReservations", myReservations); // 모델에 예약 내역 추가

        System.out.println("Number of reservations: " + myReservations.size()); // 예약 개수 확인

        return "gw/reservation/reservationList"; // JSP 경로 (사용자 예약 목록 페이지)
    }

}
