package kr.or.ddit;


import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.YearMonth;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.security.CustomUserDetailService;
import kr.or.ddit.security.RealUserWrapper;
import kr.or.ddit.works.alarm.service.OneSignalService;
import kr.or.ddit.works.company.vo.CompaniesVO;
import kr.or.ddit.works.mail.exception.NeedOAuthRedirectException;
import kr.or.ddit.works.mail.service.MailService;
import kr.or.ddit.works.mybatis.mappers.LoginMapper;
import kr.or.ddit.works.notice.service.NoticeService;
import kr.or.ddit.works.notice.vo.NoticeVO;
import kr.or.ddit.works.organization.service.DclzStatusService;
import kr.or.ddit.works.organization.vo.DclzStatusVO;
import kr.or.ddit.works.organization.vo.EmployeeVO;
import kr.or.ddit.works.schedule.service.ScheduleService;
import kr.or.ddit.works.schedule.vo.ScheduleVO;




/**
 * 
 * @author 손현진
 * @since 2025. 3. 17.
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 17.     	손현진	        최초 생성 누구냐
 *  2025. 3. 17.		손현진			고객사 관리자계정 그룹웨어 연동
 *
 * </pre>
 */
@Controller
public class IndexController{
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Autowired
	private CustomUserDetailService userDetailsService;
	
	@Autowired
	private LoginMapper mapper;
	
	@Autowired
    private MailService mailService;
	
	@Autowired
	private DclzStatusService dclzService;
	
	@Autowired
	private NoticeService noticeService;
	
	@Autowired
	private ScheduleService scheduleService;
	
	@GetMapping("/")
	public String index(HttpSession session, Model model, Authentication authentication){
		
		if (authentication == null || !authentication.isAuthenticated()) {
	        return "sep:indexSep";
	    }
		
		boolean isAdmin = authentication.getAuthorities().stream()
	            .anyMatch(auth -> auth.getAuthority().equals("ROLE_ADMIN"));
		
		if(isAdmin) {
			CompaniesVO admin = mapper.autoLogin(authentication.getName());
			String loginId = admin.getContactId();
			autoLogin(loginId);
		}
		// 관리자모드 진입 -> 홈 버튼 눌렀을때 상단 메뉴바 동적 변경을 위한 isAdmin 세션 삭제
		session.removeAttribute("isAdmin");
		return "sep:indexSep";
	}
	

	@GetMapping("/{companyNo}/groupware")
	public String index2(
		@PathVariable String companyNo, Model model, Authentication authentication
		
	) throws Exception{
		model.addAttribute("companyNo", companyNo);
		Object principal = authentication.getPrincipal();
		
		// 공지사항 최근 5개 조회
	    List<NoticeVO> noticeList = noticeService.selectRecentNoticeList(companyNo);
	    model.addAttribute("noticeList", noticeList);
	    
	    
		if (principal instanceof RealUserWrapper) { 
	        RealUserWrapper wrapper = (RealUserWrapper) principal;
	        Object realUser = wrapper.getRealUser();

	        if (realUser instanceof CompaniesVO) { 
	        	CompaniesVO user = (CompaniesVO) realUser;
	            String adminId = user.getAdminId();
	            if (adminId != null) {
	                autoLogin(adminId);
	                try {
	                    mailService.tryAutoAuth(adminId);
	                } catch (NeedOAuthRedirectException e) {
	                    return "redirect:/mail/oauth/start?empId=" + adminId;
	                }
	                mailService.getMailList(adminId);
	                return "gw:indexGW";
	            }
	        }
		}
		    
		String empId = authentication.getName();
		mailService.getMailList(empId);
		return "gw:indexGW";
	}
	
	private void autoLogin(String loginId) {
	    UserDetails userDetails = userDetailsService.loadUserByUsername(loginId);

	    UsernamePasswordAuthenticationToken authToken =
	        new UsernamePasswordAuthenticationToken(userDetails, userDetails.getPassword(), userDetails.getAuthorities());

	    SecurityContextHolder.getContext().setAuthentication(authToken);
	}
	
	@Autowired
	private OneSignalService oneSignalService;

	@GetMapping("tests")
	public void testSendNotification() {
	    String message = "테스트 알림입니다!";
	    List<String> playerIds = Arrays.asList("b367f1e4-3a7a-45c4-82ca-42552c78fdba");

	    // 알림 전송
	    oneSignalService.sendNotification(message, playerIds);
	}
	
	@GetMapping("{companyNo}/dclz/main-panel")
	public String renderDclzPanel(@PathVariable String companyNo, Model model) {
	    Authentication auth = SecurityContextHolder.getContext().getAuthentication();
	    Object principal = auth.getPrincipal();

	    String empId = null;
	    if (principal instanceof RealUserWrapper user && user.getRealUser() instanceof EmployeeVO emp) {
	        empId = emp.getEmpId();
	    }

	    if (empId == null) return "error/unauthorized";
	    
	    DclzStatusVO todayStatus = dclzService.selectTodayDclzStatus(empId);
	    String weeklyTotalHours = formatTime(
	    	    Optional.ofNullable(dclzService.getWeeklyTotalHours(empId))
	    	            .map(Integer::parseInt)
	    	            .orElse(0)
	    	);

	    model.addAttribute("todayDclzStatus", todayStatus);
	    model.addAttribute("weeklyTotalHours", weeklyTotalHours);
	    model.addAttribute("empId", empId);
	    model.addAttribute("companyNo", companyNo);
	    
	    return "groupware/dclz/mainDclzPanel"; // 이 JSP는 include용 partial 페이지
	}
	  private String formatTime(int totalMinutes) {
	        int h = totalMinutes / 60;
	        int m = totalMinutes % 60;
	        return h + "시간 " + m + "분";
	    }
	  
	  @GetMapping("/{companyNo}/widget/schedule")
	  public String scheduleWidgetPartial(
	      @PathVariable String companyNo,
	      Model model,
	      Authentication authentication
	  ) throws JsonProcessingException {
		  model.addAttribute("companyNo", companyNo);

		    Object principal = authentication.getPrincipal();
		    String empId = authentication.getName();
		    if (principal instanceof RealUserWrapper wrapper && wrapper.getRealUser() instanceof EmployeeVO emp) {
		        empId = emp.getEmpId();
		    }

		    // 이번 달의 시작과 끝 날짜
		    YearMonth thisMonth = YearMonth.now();
		    LocalDate startDate = thisMonth.atDay(1);
		    LocalDate endDate = thisMonth.atEndOfMonth();

		    List<ScheduleVO> schedules = scheduleService.selectThisMonthSchedules(empId, startDate, endDate);

		    // Map: yyyy-MM-dd -> 일정 리스트
		    Map<String, List<Map<String, String>>> scheduleMap = new LinkedHashMap<>();
		    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		    for (ScheduleVO s : schedules) {
		        String date = sdf.format(s.getSchdlBgngYmd());
		        scheduleMap.putIfAbsent(date, new ArrayList<>());
		        scheduleMap.get(date).add(Map.of(
		            "schdlNm", s.getSchdlNm(),
		            "schdlType", s.getScheduleTypeNm()
		        ));
		    }

		    ObjectMapper mapper = new ObjectMapper();
		    model.addAttribute("scheduleJson", mapper.writeValueAsString(scheduleMap));
		    model.addAttribute("currentMonth", thisMonth.format(DateTimeFormatter.ofPattern("yyyy.MM")));

		    return "groupware/schedule/mainScheduleWidget";
	  }
}

