/** 
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 * 2025. 4. 4.     	JSW            최초 생성
 *
 * </pre>
 */
function fetchParticipants(projectNo) {
            console.log("Fetching participants for projectNo:", projectNo);
            if (!projectNo) {
                document.getElementById('empId').innerHTML = '<option value="">선택하세요</option>';
                return;
            }

            const contextPath = document.getElementById('contextPath').value;
            const companyNo = document.getElementById('companyNo').value;
            
            const url = `/sep/${companyNo}/task/new/participants/` + projectNo;
            
            console.log("Final URL:", url);

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Fetched participants:", data);  // 데이터 구조 확인

                    const participantSelect = document.getElementById('empId');
                    participantSelect.innerHTML = '<option value="">선택하세요</option>';

                    if (data.length === 0) {
                        const option = document.createElement('option');
                        option.value = '';
                        option.text = '참여자가 없습니다.';
                        participantSelect.appendChild(option);
                    } else {
                        data.forEach(participant => {
                            const option = document.createElement('option');
                            option.value = participant.empId; // ← 혹은 participant.empId로도 테스트
                            option.text = `${participant.empId} (${participant.empNm})`;
                            participantSelect.appendChild(option);
                        });
                    }
                })
                .catch(error => console.error('Error fetching participants:', error));
        }

        document.addEventListener('DOMContentLoaded', function () {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('taskStartDate').value = today;

            const selectedProjectNo = "${selectedProjectNo}";
            if (selectedProjectNo && selectedProjectNo !== 'null' && selectedProjectNo.trim() !== '') {
                fetchParticipants(selectedProjectNo);
            }

            const projectSelect = document.getElementById('projectNo');
            projectSelect.addEventListener('change', function () {
                const projectNo = this.value;
                if (projectNo && projectNo.trim() !== '') {
                    fetchParticipants(projectNo);
                } else {
                    document.getElementById('empId').innerHTML = '<option value="">선택하세요</option>';
                }
            });
        });
		document.getElementById("editBtn").addEventListener("click", function () {
		    document.getElementById("editForm").classList.remove("d-none");
		});

		document.getElementById("saveBtn").addEventListener("click", function () {
		    const taskNo = '${taskNo}';
		    const companyNo = '${companyNo}';
		    const contextPath = '${pageContext.request.contextPath}';

		    const data = {
		        taskNo: taskNo,
		        taskTitle: document.getElementById("editTaskTitle").value,
		        taskContent: document.getElementById("editTaskContent").value,
		        progress: document.getElementById("editProgress").value,
		        taskStartDate: document.getElementById("editStartDate").value,
		        taskEndDate: document.getElementById("editEndDate").value
		    };

		    fetch(`${contextPath}/${companyNo}/task/ajax/update`, {
		        method: "POST",
		        headers: {
		            "Content-Type": "application/json",
		            "${_csrf.headerName}": "${_csrf.token}"
		        },
		        body: JSON.stringify(data)
		    })
		    .then(res => {
		        if (!res.ok) throw new Error("수정 실패");
		        return res.text();
		    })
		    .then(() => {
		        Swal.fire("성공", "업무가 수정되었습니다!", "success")
		            .then(() => location.reload());
		    })
		    .catch(() => {
		        Swal.fire("오류", "수정 중 문제가 발생했습니다.", "error");
		    });
		});