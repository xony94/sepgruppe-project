<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.works.mybatis.mappers.CommunityMapper">

	<resultMap type="CommunityVO" id="communityMap" autoMapping="true">
		<id property="communityNo" column="COMMUNITY_NO"/>
		<result property="empId" column="EMP_ID"/>
		<result property="memberCount" column="MEMBER_COUNT"/>
		<result property="communityNm" column="COMMUNITY_NM"/>
		<result property="communityContent" column="COMMUNITY_CONTENT"/>
		<result property="communityCreatedAt" column="COMMUNITY_CREATED_AT"/>
		<result property="communityIsClosed" column="COMMUNITY_IS_CLOSED"/>
		<result property="closureReason" column="CLOSURE_REASON"/>
		<result property="closureTimestamp" column="CLOSURE_TIMESTAMP"/>
		<result property="joinedEmpId" column="JOINED_EMP_ID"/>
		<result property="postCount" column="POST_COUNT"/>


		<collection property="joinStatus" ofType="JoinStatusVO">
			<id property="requestNo" column="REQUEST_NO"/>
			<result property="userStatus" column="USER_STATUS"/>
			<result property="requestDate" column="REQUEST_DATE"/>
			<result property="rejectionReason" column="REJECTION_REASON"/>
		</collection>

		<collection property="employee" ofType="EmployeeVO">
			<id property="empId" column="EMP_ID"/>
			<result property="empNm" column="EMP_NM"/>
		</collection>

		<collection property="board" ofType="BoardVO">
			<id property="boardNo" column="BOARD_NO"/>
			<result property="boardNm" column="BOARD_NM"/>
			<result property="boardContent" column="BOARD_CONTENT"/>

			<collection property="post" ofType="PostVO">
				<id property="postNo" column="POST_NO"/>
	            <result property="memberNo" column="MEMBER_NO"/>
	            <result property="postTitle" column="POST_TITLE"/>
	            <result property="postContent" column="POST_CONTENT"/>
	            <result property="postCreatedAt" column="POST_CREATED_AT"/>
	            <result property="postUpdatedAt" column="POST_UPDATED_AT"/>
	            <result property="postLikeCount" column="POST_LIKE_COUNT"/>
	            <result property="postIsDraft" column="POST_IS_DRAFT"/>
	            <result property="postAllowComments" column="POST_ALLOW_COMMENTS"/>
	            <result property="fileGroupNo" column="FILE_GROUP_NO"/>
	            <result property="postViewCount" column="POST_VIEW_COUNT"/>
			</collection>
		</collection>
	</resultMap>

	<!-- extends : 위 MAP 상속 (위의 MAP + alpa) -->
	<resultMap type="CommunityVO" id="communityMemberMap" extends="communityMap">
		<collection property="communityMember" ofType="CommunityMemberVO" autoMapping="false">
			<id property="memberNo" column="MEMBER_NO" />
			<result property="memberJoinDate" column="MEMBER_JOIN_DATE"/>
			<result property="memberRole" column="MEMBER_ROLE"/>
			<result property="memberActivityStatus" column="MEMBER_ACTIVITY_STATUS"/>
			<association property="employee" javaType="EmployeeVO" autoMapping="false">
				<result property="empId" column="EMPMEMBERID"/>
				<result property="empNm" column="EMPMEMBERNM"/>
			</association>
		</collection>
	</resultMap>

	<!-- 방 관리를 위한 resultMap -->
	<resultMap id="roomManagementMap" type="CommunityVO" extends="communityMap" autoMapping="false">

	    <!-- 방장 이름만 추가 -->
	    <association property="employee" javaType="EmployeeVO" autoMapping="false">
	        <result property="empNm" column="ROOM_MASTER_NAME"/>
	    </association>

	    <!-- 가입 요청 목록 -->
	    <collection property="joinStatus" ofType="JoinStatusVO" autoMapping="false">
	        <id property="requestNo" column="REQUEST_NO"/>
	        <result property="empId" column="REQUEST_EMP_ID"/>
	        <result property="userStatus" column="USER_STATUS"/>
	        <result property="requestDate" column="REQUEST_DATE"/>
	        <result property="rejectionReason" column="REJECTION_REASON"/>
	        <association property="employee" javaType="EmployeeVO" autoMapping="false">
	            <result property="empNm" column="REQUEST_MEMBER_NAME"/>
	        </association>
	    </collection>

	    <!-- 커뮤니티 멤버 목록 -->
	    <collection property="communityMember" ofType="CommunityMemberVO" autoMapping="false">
	        <id property="memberNo" column="MEMBER_NO"/>
	        <result property="memberRole" column="MEMBER_ROLE"/>
	        <result property="memberJoinDate" column="MEMBER_JOIN_DATE"/>
	        <result property="memberActivityStatus" column="MEMBER_ACTIVITY_STATUS"/>
	        <association property="employee" javaType="EmployeeVO" autoMapping="false">
	            <result property="empId" column="MEMBER_EMP_ID"/>
	            <result property="empNm" column="MEMBER_EMP_NAME"/>
	        </association>
	    </collection>
	</resultMap>


	<resultMap id="commentMap" type="CommentVO" autoMapping="true">
    <id property="replyNo" column="REPLY_NO"/>
    <result property="postNo" column="POST_NO"/>
    <result property="memberNo" column="MEMBER_NO"/>
    <result property="replyContent" column="REPLY_CONTENT"/>
    <result property="replyCreateDate" column="REPLY_CREATE_DATE"/>
    <result property="replyUpdateDate" column="REPLY_UPDATE_DATE"/>

    <association property="communityMember" javaType="CommunityMemberVO" autoMapping="false">
        <result property="empId" column="EMP_ID"/>
        <association property="employee" javaType="EmployeeVO" autoMapping="false">
            <result property="empNm" column="EMP_NM"/>
        </association>
    </association>
</resultMap>
	<!-- 가입된 커뮤니티 회원정보 조회 -->
	<select id="communityMember" resultMap="communityMemberMap">
		SELECT
			C.MEMBER_NO
			, C.COMMUNITY_NO
		    , C.EMP_ID AS EMPMEMBERID
		    , C.MEMBER_ROLE
		    , E.EMP_NM AS EMPMEMBERNM
		FROM
		    COMMUNITY_MEMBER C
		LEFT JOIN
			EMPLOYEE E ON C.EMP_ID = E.EMP_ID
		WHERE
		    COMMUNITY_NO = #{communityNo}
	</select>

	<!-- 가입된 커뮤니티 방 정보 조회 -->
	<select id="memberCommunityList" resultMap="communityMemberMap">
SELECT
    JS.COMMUNITY_NO,
    JS.EMP_ID,
    JS.REQUEST_DATE,
    JS.USER_STATUS,
    CM.MEMBER_NO,
    CM.MEMBER_JOIN_DATE,
    CM.MEMBER_ROLE,
    CM.MEMBER_ACTIVITY_STATUS,
    C.COMMUNITY_NM,
    C.COMMUNITY_CONTENT,
    C.COMMUNITY_CREATED_AT,
    C.COMMUNITY_IS_CLOSED,
    (SELECT EMP_NM FROM EMPLOYEE E WHERE E.EMP_ID = C.EMP_ID) AS EMP_NM,
    (
        SELECT COUNT(*)
        FROM POST P
        JOIN BOARD B ON P.BOARD_NO = B.BOARD_NO
        WHERE B.COMMUNITY_NO = C.COMMUNITY_NO
        AND P.POST_IS_DRAFT = 'N'
    ) AS POST_COUNT,
    (
        SELECT COUNT(*)
        FROM COMMUNITY_MEMBER CM2
        WHERE CM2.COMMUNITY_NO = C.COMMUNITY_NO
    ) AS MEMBER_COUNT
FROM
    JOIN_STATUS JS
LEFT JOIN
    COMMUNITY_MEMBER CM
    ON JS.REQUEST_NO = CM.REQUEST_NO
    AND JS.COMMUNITY_NO = CM.COMMUNITY_NO
    AND JS.EMP_ID = CM.EMP_ID
LEFT JOIN
    COMMUNITY C
    ON JS.COMMUNITY_NO = C.COMMUNITY_NO
WHERE
    JS.EMP_ID = #{empId}

	</select>

	<!-- 커뮤니티방 전체 목록 조회 -->
	<select id="communityList" resultMap="communityMap">
		SELECT
		    C.COMMUNITY_NM
		    , COUNT(CM.MEMBER_NO) AS MEMBER_COUNT
		    , E.EMP_NM
		    , TO_CHAR(C.COMMUNITY_CREATED_AT, 'YYYY-MM-DD') AS COMMUNITY_CREATED_AT
		    , C.COMMUNITY_NO
		    , C.COMMUNITY_IS_CLOSED
		    , CM2.EMP_ID AS JOINED_EMP_ID
		FROM
		    COMMUNITY C
		LEFT JOIN
		    COMMUNITY_MEMBER CM ON C.COMMUNITY_NO = CM.COMMUNITY_NO
		LEFT JOIN
		    EMPLOYEE E ON C.EMP_ID = E.EMP_ID
		LEFT JOIN
		    COMMUNITY_MEMBER CM2 ON C.COMMUNITY_NO = CM2.COMMUNITY_NO AND CM2.EMP_ID = #{empId}
		WHERE
		    C.COMMUNITY_IS_CLOSED = 'N'
		GROUP BY
		    C.COMMUNITY_NM
		    , E.EMP_NM
		    , C.COMMUNITY_CREATED_AT
		    , C.COMMUNITY_NO
		    , C.COMMUNITY_IS_CLOSED
		    , CM2.EMP_ID
	</select>

	<!-- 커뮤니티방의 게시글 전체 조회 -->
	<select id="boardList" resultMap="communityMap">
		SELECT
		    C.COMMUNITY_NO
		    , C.COMMUNITY_NM
		    , C.COMMUNITY_CONTENT
		    , C.COMMUNITY_CREATED_AT
		    , B.BOARD_NO
		    , B.BOARD_NM
		    , B.BOARD_CONTENT
		    , P.POST_NO
		    , P.POST_TITLE
		    , P.MEMBER_NO
		    , TO_CHAR(P.POST_CREATED_AT, 'YYYY-MM-DD') AS POST_CREATED_AT
		    , P.POST_LIKE_COUNT
		    , P.POST_IS_DRAFT
		    , P.POST_ALLOW_COMMENTS
		    , P.POST_VIEW_COUNT
		    , CO.REPLY_NO
		    , CO.REPLY_CONTENT
		    , CO.REPLY_CREATE_DATE
		    , L.LIKE_NO
		    , L.LIKE_IS_ACTIVE
		    , CM.MEMBER_ROLE
		    , M.EMP_NM AS EMP_NM
		FROM
		    COMMUNITY C
		    LEFT JOIN BOARD B ON C.COMMUNITY_NO = B.COMMUNITY_NO
		    LEFT JOIN POST P ON B.BOARD_NO = P.BOARD_NO
		    LEFT JOIN COMMENTS CO ON P.POST_NO = CO.POST_NO
		    LEFT JOIN LIKES L ON P.POST_NO = L.POST_NO
		    LEFT JOIN COMMUNITY_MEMBER CM ON CM.COMMUNITY_NO = C.COMMUNITY_NO
		    AND CM.MEMBER_NO = P.MEMBER_NO
		    LEFT JOIN EMPLOYEE M ON M.EMP_ID = P.EMP_ID
		WHERE
		    C.COMMUNITY_NO = #{communityNo}
		ORDER BY
		    B.BOARD_NO, P.POST_NO, CO.REPLY_NO
	</select>

	<!-- 게시판에 해당되는 게시글 조회 -->
	<select id="boardNoList" resultMap="communityMap">
		SELECT
		    C.COMMUNITY_NO
		    , C.COMMUNITY_NM
		    , C.COMMUNITY_CONTENT
		    , C.COMMUNITY_CREATED_AT
		    , B.BOARD_NO
		    , B.BOARD_NM
		    , B.BOARD_CONTENT
		    , P.POST_NO
		    , P.POST_TITLE
		    , P.MEMBER_NO
		    , TO_CHAR(P.POST_CREATED_AT, 'YYYY-MM-DD') AS POST_CREATED_AT
		    , P.POST_LIKE_COUNT
		    , P.POST_IS_DRAFT
		    , P.POST_ALLOW_COMMENTS
		    , P.POST_VIEW_COUNT
		    , CO.REPLY_NO
		    , CO.REPLY_CONTENT
		    , CO.REPLY_CREATE_DATE
		    , L.LIKE_NO
		    , L.LIKE_IS_ACTIVE
		    , CM.MEMBER_ROLE
		    , M.EMP_NM AS EMP_NM
		FROM
		    COMMUNITY C
		    LEFT JOIN BOARD B ON C.COMMUNITY_NO = B.COMMUNITY_NO
		    LEFT JOIN POST P ON B.BOARD_NO = P.BOARD_NO
		    LEFT JOIN COMMENTS CO ON P.POST_NO = CO.POST_NO
		    LEFT JOIN LIKES L ON P.POST_NO = L.POST_NO
		    LEFT JOIN COMMUNITY_MEMBER CM ON CM.COMMUNITY_NO = C.COMMUNITY_NO
		    AND CM.MEMBER_NO = P.MEMBER_NO
		    LEFT JOIN EMPLOYEE M ON M.EMP_ID = P.EMP_ID
		WHERE
		    P.BOARD_NO = #{boardNo}
		ORDER BY
		    B.BOARD_NO, P.POST_NO, CO.REPLY_NO
	</select>

	<!-- communityNo 가져오기 -->
	<select id="communityNo">
		SELECT
			NVL(MAX(COMMUNITY_NO), 0) + 1
		FROM COMMUNITY
	</select>

	<!-- requestNo 가져오기 -->
	<select id="requestNo">
		SELECT
			NVL(MAX(REQUEST_NO), 0) + 1
		FROM JOIN_STATUS
	</select>


	<!-- 커뮤니티방 개설 (COMMUNITY 테이블 INSERT) -->
	<insert id="insertRoom">
		INSERT INTO COMMUNITY (
		    COMMUNITY_NO
		    , COMMUNITY_NM
		    , COMMUNITY_CONTENT
		    , COMMUNITY_CREATED_AT
		    , EMP_ID
		) VALUES (
		    #{communityNo,jdbcType=NUMERIC}
		    , #{communityNm,jdbcType=VARCHAR}
		    , #{communityContent,jdbcType=VARCHAR}
		    , SYSDATE
		    , #{empId,jdbcType=VARCHAR}
		)
	</insert>

	<!-- 커뮤니티방 개설 (COMMUNITY_MEMBER 테이블 INSERT) -->
	<insert id="insertRoomMember">
		INSERT INTO COMMUNITY_MEMBER (
		    MEMBER_NO
		    , REQUEST_NO
		    , COMMUNITY_NO
		    , EMP_ID
		    , MEMBER_JOIN_DATE
		    , MEMBER_ROLE
		    , MEMBER_ACTIVITY_STATUS
		) VALUES (
		    (SELECT NVL(MAX(MEMBER_NO), 0) + 1 FROM COMMUNITY_MEMBER)
			, #{requestNo,jdbcType=NUMERIC}
			, #{communityNo,jdbcType=NUMERIC}
			, #{empId,jdbcType=VARCHAR}
			, SYSDATE
			, #{memberRole,jdbcType=VARCHAR}
			, '활동중'
		)
	</insert>

	<!-- 커뮤니티방 개설 (JOIN_STATUS 테이블 INSERT) -->
	<insert id="insertStatusMember">
		INSERT INTO JOIN_STATUS (
		    REQUEST_NO
		    , COMMUNITY_NO
		    , EMP_ID
		    , USER_STATUS
		    , REQUEST_DATE
		) VALUES (
		    #{requestNo,jdbcType=NUMERIC}
			, #{communityNo,jdbcType=NUMERIC}
			, #{empId,jdbcType=VARCHAR}
			, '승인'
			, SYSDATE
		)
	</insert>

	<!-- 게시판 추가 -->
	<insert id="insertBoard">
		INSERT INTO BOARD(
			BOARD_NO
			, COMMUNITY_NO
			, BOARD_NM
			, BOARD_CONTENT
		) VALUES (
			(SELECT NVL(MAX(BOARD_NO), 0) + 1 FROM BOARD)
			, #{communityNo,jdbcType=NUMERIC}
			, #{boardNm,jdbcType=VARCHAR}
			, #{boardContent,jdbcType=VARCHAR}
		)
	</insert>

	<!-- 게시글 상세조회 -->
	<select id="selectPostDetail" resultType="CommunityVO" resultMap="communityMemberMap">
		SELECT
		    P.POST_NO
		  , P.BOARD_NO
		  , P.MEMBER_NO
		  , P.POST_TITLE
		  , P.POST_CONTENT
		  , TO_CHAR(P.POST_CREATED_AT, 'YYYY-MM-DD') AS POST_CREATED_AT
		  , P.POST_UPDATED_AT
		  , P.POST_LIKE_COUNT
		  , P.POST_IS_DRAFT
		  , P.POST_ALLOW_COMMENTS
		  , P.FILE_GROUP_NO
		  , P.EMP_ID AS EMPMEMBERID
		  , P.POST_VIEW_COUNT
		  , E.EMP_NM
		  , B.BOARD_NM
		FROM
		    POST P
		LEFT JOIN EMPLOYEE E ON P.EMP_ID = E.EMP_ID
		LEFT JOIN BOARD B ON P.BOARD_NO = B.BOARD_NO
		WHERE
			POST_NO = #{postNo,jdbcType=NUMERIC}
	</select>

	<!-- 좋아요 등록 취소를 위한 게시글에 해당하는 좋아요 수 조회 -->
	<select id="selectLike">
		SELECT
		    COUNT(*) AS LIKE_NO
		FROM
		    LIKES
		WHERE
		    POST_NO = #{postNo,jdbcType=NUMERIC}
	</select>

	<!-- 좋아요 상태관리를 위한 조회 -->
	<select id="likeStatus">
		SELECT
			LIKE_NO
			, LIKE_IS_ACTIVE
		FROM
			LIKES
		WHERE
			POST_NO = #{postNo,jdbcType=NUMERIC}
		AND
			MEMBER_NO = #{memberNo,jdbcType=NUMERIC}
	</select>

	<!-- 좋아요 등록 (LIKE 테이블 INSERT)-->
	<insert id="likeInsert">
		INSERT INTO LIKES(
			LIKE_NO
			, POST_NO
			, MEMBER_NO
			, LIKE_IS_ACTIVE
		) VALUES (
			(SELECT NVL(MAX(LIKE_NO), 0) + 1 FROM LIKES)
			, #{postNo,jdbcType=NUMERIC}
			, #{memberNo,jdbcType=NUMERIC}
			, 'Y'
		)
	</insert>

	<!-- 좋아요 등록 및 취소 (POST 테이블 UPDATE)-->
	<update id="likeUpdate">
		UPDATE
			POST
		SET
			POST_LIKE_COUNT = #{postLikeCount,jdbcType=NUMERIC}
		WHERE
			POST_NO = #{postNo,jdbcType=NUMERIC}
	</update>


	<!-- 좋아요 취소 (LIKE 테이블 DELETE) -->
	<delete id="likeDelete">
		DELETE FROM
			LIKES
		WHERE
			POST_NO = #{postNo,jdbcType=NUMERIC}
	</delete>

	<!-- 방 관리를 위한 조회 -->
	<select id="roomManagement" resultMap="roomManagementMap">
		SELECT
	      JS.COMMUNITY_NO
	    , C.COMMUNITY_NM
	    , C.COMMUNITY_CONTENT
	    , C.COMMUNITY_CREATED_AT

	    , RM.EMP_NM AS ROOM_MASTER_NAME

	    , JS.REQUEST_NO
	    , JS.EMP_ID AS REQUEST_EMP_ID
	    , REQ.EMP_NM AS REQUEST_MEMBER_NAME
	    , JS.USER_STATUS
	    , JS.REQUEST_DATE
	    , JS.REJECTION_REASON

	    , CM.MEMBER_NO
	    , CM.MEMBER_ROLE
	    , CM.MEMBER_JOIN_DATE
	    , CM.MEMBER_ACTIVITY_STATUS

	    , MEM.EMP_ID AS MEMBER_EMP_ID
	    , MEM.EMP_NM AS MEMBER_EMP_NAME

	FROM JOIN_STATUS JS

	LEFT JOIN COMMUNITY C
	    ON JS.COMMUNITY_NO = C.COMMUNITY_NO

	LEFT JOIN EMPLOYEE RM
	    ON C.EMP_ID = RM.EMP_ID

	LEFT JOIN EMPLOYEE REQ
	    ON JS.EMP_ID = REQ.EMP_ID

	LEFT JOIN COMMUNITY_MEMBER CM
	    ON JS.COMMUNITY_NO = CM.COMMUNITY_NO
	    AND JS.EMP_ID = CM.EMP_ID

	LEFT JOIN EMPLOYEE MEM
	    ON CM.EMP_ID = MEM.EMP_ID

	WHERE JS.COMMUNITY_NO = #{communityNo,jdbcType=NUMERIC}

	</select>

	<!-- 방정보 수정 -->
	<update id="roomDataUpdate">
		UPDATE
			COMMUNITY
		SET
			COMMUNITY_CONTENT = #{communityContent,jdbcType=VARCHAR}
			, COMMUNITY_IS_CLOSED = #{communityIsClosed,jdbcType=CHAR}
			, CLOSURE_REASON = #{closureReason,jdbcType=VARCHAR}
			, CLOSURE_TIMESTAMP = #{closureTimestamp,jdbcType=DATE}
		WHERE
			COMMUNITY_NO = #{communityNo,jdbcType=NUMERIC}
	</update>

	<!-- 가입 승인 또는 거절 -->
	<update id="roomJoinStatus">
		UPDATE
			JOIN_STATUS
		SET
			USER_STATUS = #{userStatus,jdbcType=VARCHAR}
			, REJECTION_REASON = #{rejectionReason,jdbcType=VARCHAR}
		WHERE
			COMMUNITY_NO = #{communityNo,jdbcType=NUMERIC}
		AND
			EMP_ID = #{empId,jdbcType=VARCHAR}
		AND
			REQUEST_NO = #{requestNo,jdbcType=NUMERIC}
	</update>

	<!-- 가입 요청자의 requestNo 조회 -->
	<select id="memberRequestNo">
		SELECT
		    REQUEST_NO
		FROM
		    JOIN_STATUS
		WHERE
		    EMP_ID = #{empId,jdbcType=VARCHAR}
		AND
		    COMMUNITY_NO = #{communityNo,jdbcType=NUMERIC}
	</select>

	<!-- 강퇴처리 (COMMUNITY_MEMBER 테이블 DELETE) -->
	<delete id="roomMemberDelete">
		DELETE FROM
			COMMUNITY_MEMBER
		WHERE
			MEMBER_NO = #{memberNo,jdbcType=NUMERIC}
		AND
			REQUEST_NO = #{requestNo,jdbcType=NUMERIC}
	</delete>

	<!-- 강퇴처리 (JOIN_STATUS 테이블 DELETE) -->
	<delete id="roomStatusDelete">
		DELETE FROM
			JOIN_STATUS
		WHERE
			REQUEST_NO = #{requestNo,jdbcType=NUMERIC}
	</delete>


	<!-- 요청자의 멤버 번호 조회 -->
	<select id="memberNo">
		SELECT
			MEMBER_NO
		FROM
			COMMUNITY_MEMBER
		WHERE
			EMP_ID = #{empId,jdbcType=VARCHAR}
	</select>


	<!-- 폐쇄하기 (LIKES 테이블 DELETE) -->
	<delete id="likesRoomShutdown">
		DELETE FROM
			LIKES
		WHERE
			POST_NO IN (
				SELECT
					P.POST_NO
				FROM
					POST P
				JOIN
					BOARD B ON P.BOARD_NO = B.BOARD_NO
				WHERE
					B.COMMUNITY_NO = #{communityNo,jdbcType=NUMERIC}
			)
	</delete>

	<!-- 폐쇄하기 (COMMENT 테이블 DELETE) -->
	<delete id="commentRoomShutdown">
		DELETE FROM
			COMMENTS
		WHERE
			POST_NO IN (
				SELECT
					P.POST_NO
				FROM
					POST P
				JOIN
					BOARD B ON P.BOARD_NO = B.BOARD_NO
				WHERE
					B.COMMUNITY_NO = #{communityNo,jdbcType=NUMERIC}
			)
	</delete>

	<!-- 폐쇄하기 (POST 테이블 DELETE) -->
	<delete id="postRoomShutdown">
		DELETE FROM
			POST
		WHERE
			BOARD_NO IN (
				SELECT
					BOARD_NO
				FROM
					BOARD
				WHERE
					COMMUNITY_NO = #{communityNo,jdbcType=NUMERIC}
			)
	</delete>

	<!-- 폐쇄하기 (BOARD 테이블 DELETE) -->
	<delete id="boardRoomShutdown">
		DELETE FROM
			BOARD
		WHERE
			COMMUNITY_NO = #{communityNo,jdbcType=NUMERIC}
	</delete>

	<!-- 폐쇄하기 (JOIN_STATUS 테이블 DELETE) -->
	<delete id="joinStatusRoomShutdown">
		DELETE FROM
			JOIN_STATUS
		WHERE
			COMMUNITY_NO = #{communityNo,jdbcType=NUMERIC}
	</delete>

	<!-- 폐쇄하기 (COMMUNITY_MEMBER 테이블 DELETE) -->
	<delete id="communityMemberRoomShutdown">
		DELETE FROM
			COMMUNITY_MEMBER
		WHERE
			COMMUNITY_NO = #{communityNo,jdbcType=NUMERIC}
	</delete>

	<!-- 폐쇄하기 (COMMUNITY 테이블 UPDATE)-->
	<update id="communityRoomShutdown">
		UPDATE
			COMMUNITY
		SET
			COMMUNITY_IS_CLOSED = 'Y'
			, CLOSURE_REASON = #{closureReason,jdbcType=VARCHAR}
			, CLOSURE_TIMESTAMP = SYSDATE
		WHERE
			COMMUNITY_NO = #{communityNo, jdbcType=NUMERIC}
	</update>

	<!-- 커뮤니티방 가입 요청 -->
	<insert id="joinStatusInsert">
		INSERT INTO
			JOIN_STATUS (
				REQUEST_NO
			    , COMMUNITY_NO
			    , EMP_ID
			    , USER_STATUS
			    , REQUEST_DATE
			) VALUES (
				(SELECT NVL(MAX(REQUEST_NO), 0) + 1 FROM JOIN_STATUS)
				, #{communityNo,jdbcType=NUMERIC}
				, #{empId,jdbcType=VARCHAR}
				, '대기'
				, SYSDATE
			)
	</insert>

<insert id="insertPost" parameterType="map">
    <selectKey resultType="long" keyProperty="postNo" order="BEFORE">
        SELECT NVL(MAX(POST_NO), 0) + 1 FROM POST
    </selectKey>
    INSERT INTO POST (
        POST_NO,
        BOARD_NO,
        MEMBER_NO,
        POST_TITLE,
        POST_CONTENT,
        POST_CREATED_AT,
        EMP_ID
    ) VALUES (
        #{postNo, jdbcType=NUMERIC},
        #{boardNo, jdbcType=NUMERIC},
        #{memberNo, jdbcType=NUMERIC},
        #{postTitle, jdbcType=VARCHAR},
        #{postContent, jdbcType=VARCHAR},
        SYSDATE,
        #{empId, jdbcType=VARCHAR}
    )
</insert>

<insert id="insertComment">
    <selectKey resultType="long" keyProperty="replyNo" order="BEFORE">
        SELECT NVL(MAX(REPLY_NO), 0) + 1 FROM COMMENTS
    </selectKey>
	INSERT INTO COMMENTS (
	    REPLY_NO
	    , POST_NO
	    , MEMBER_NO
	    , REPLY_CONTENT
	    , REPLY_CREATE_DATE
	) VALUES (
		#{replyNo,jdbcType=NUMERIC}
		, #{postNo,jdbcType=NUMERIC}
		, #{memberNo,jdbcType=NUMERIC}
		, #{replyContent,jdbcType=VARCHAR}
	  , SYSDATE
	)
</insert>

<select id="selectComment" resultMap="commentMap" parameterType="long">
    SELECT
        C.REPLY_NO,
        C.POST_NO,
        C.MEMBER_NO,
        C.REPLY_CONTENT,
        TO_CHAR(C.REPLY_CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REPLY_CREATE_DATE,
        TO_CHAR(C.REPLY_UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS REPLY_UPDATE_DATE,
        E.EMP_ID AS EMP_ID,
        E.EMP_NM AS EMP_NM
    FROM
        COMMENTS C
    JOIN
        COMMUNITY_MEMBER M ON C.MEMBER_NO = M.MEMBER_NO
    JOIN
        EMPLOYEE E ON M.EMP_ID = E.EMP_ID
    WHERE
        C.POST_NO = #{postNo}
    ORDER BY
        C.REPLY_CREATE_DATE ASC
</select>

<!-- 방장 권한 이전 (COMMUNITY) -->
<update id="updateCommunityRoomMaster">
	UPDATE
		COMMUNITY
	SET
		EMP_ID = #{empId}
	WHERE
		COMMUNITY_NO = #{communityNo}
</update>

<!-- 방장 권한 이전 멤버 -> 방 주인(COMMUNITY_MEMBER) -->
<update id="updateCommunityMemberRoomMember">
	UPDATE
		COMMUNITY_MEMBER
	SET
		MEMBER_ROLE = '방 주인'
	WHERE
		COMMUNITY_NO = #{communityNo}
	  AND
	  	EMP_ID = #{empId}
</update>

<!-- 방장 권한 이전 방 주인 -> 멤버(COMMUNITY_MEMBER) -->
<update id="updateCommunityMemberRoomMaster">
	UPDATE
		COMMUNITY_MEMBER
	SET
		MEMBER_ROLE = '멤버'
	WHERE
		COMMUNITY_NO = #{communityNo}
	  AND
	  	MEMBER_ROLE = '방 주인'
</update>

<!-- 탈퇴 -->
<update id="deleteMember">
	UPDATE
		COMMUNITY_MEMBER
	SET
		MEMBER_ACTIVITY_STATUS = '탈퇴'
	WHERE
		MEMBER_NO = #{memberNo}
</update>

<!-- 멤버 초대 (COMMUNITY_MEMBER 테이블)-->
<insert id="insertInvitationMember">
	INSERT INTO COMMUNITY_MEMBER (
	    MEMBER_NO
	    , REQUEST_NO
	    , COMMUNITY_NO
	    , EMP_ID
	    , MEMBER_JOIN_DATE
	    , MEMBER_ROLE
	    , MEMBER_ACTIVITY_STATUS
	) VALUES (
		(SELECT NVL(MAX(MEMBER_NO), 0) + 1 FROM COMMUNITY_MEMBER)
		, #{requestNo,jdbcType=NUMERIC}
		, #{communityNo,jdbcType=NUMERIC}
		, #{empId,jdbcType=VARCHAR}
		, SYSDATE
		, '멤버'
		, '활동중'
	)
</insert>

<!-- 멤버 초대 (JOIN_STATUS 테이블)-->
<insert id="insertInvitationJoin">
	INSERT INTO JOIN_STATUS (
	    REQUEST_NO
	    , COMMUNITY_NO
	    , EMP_ID
	    , USER_STATUS
	    , REQUEST_DATE
	) VALUES (
		(SELECT NVL(MAX(REQUEST_NO), 0) + 1 FROM JOIN_STATUS)
		, #{communityNo,jdbcType=NUMERIC}
		, #{empId,jdbcType=VARCHAR}
		, '승인'
		, SYSDATE
	)
</insert>

<select id="selectCommunityDetail">
	SELECT
	    COMMUNITY_NO
	  , EMP_ID
	  , COMMUNITY_NM
	  , COMMUNITY_CONTENT
	  , COMMUNITY_CREATED_AT
	  , COMMUNITY_IS_CLOSED
	  , CLOSURE_REASON
	  , CLOSURE_TIMESTAMP
	FROM
	    COMMUNITY
	WHERE COMMUNITY_NO = #{communityNo}
</select>

</mapper>