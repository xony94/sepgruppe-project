/** 
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일       			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 * 2025. 4. 2.     	JYS            최초 생성
 *
 * </pre>
 */
const path = document.body.getAttribute('data-context-path');

const apprLineAddBtn = document.querySelector("#apprLineAddBtn");
const apprLineChangeBtn = document.querySelector("#apprLineChangeBtn");

const apprLineSaveBtn = document.querySelector("#apprLineSaveBtn");

document.addEventListener("DOMContentLoaded", () => {
    apprLineAddBtn?.addEventListener("click", addApprovalLine);
    apprLineChangeBtn?.addEventListener("click", changeApprovalLine);
	
	apprLineSaveBtn?.addEventListener("click", saveApprovalLine);
});

const autoLineSetTbody = document.querySelector("#autoLineSetTbody");

// 부트스트랩 토스트 메시지 출력 함수
function showToast(message) {
    const toastEl = document.getElementById("liveToast");
    const toastBody = toastEl.querySelector(".toast-body");
    toastBody.textContent = message;

    const toast = new bootstrap.Toast(toastEl);
    toast.show();
}

// 결재자 추가
function addApprovalLine() {
    if (!autoLineSetTbody) return;
	
    axios.get(`${path}/approval/admin/selectType`)
        .then(resp => {
            const { apprLineType, department, position } = resp.data;
            
            const apprLineTypeOptions = apprLineType.map(item => `<option value="${item.commCodeNo}">${item.commCodeName}</option>`).join("");
            const departmentOptions = department.map(item=> `<option value="${item.deptCd}">${item.deptName}</option>`).join("");
			const positionOptions = position.map(item => `<option value="${item.positionCd}">${item.positionName}</option>`).join("");
			
            
            const existingRows = autoLineSetTbody.querySelectorAll("tr");
            const aprvlTurn = existingRows.length + 1;
            
            const newRow = document.createElement("tr");
            newRow.innerHTML =  `
                <td id="aprvlTurn">${aprvlTurn}</td>
                <td>
                    <select id="commCodeNo">
                        <option value="none">==타입==</option>
                        ${apprLineTypeOptions}
                    </select>
                </td>
				<td>
                    <select id="deptCd">
                        <option value="none">==부서==</option>
                        ${departmentOptions}
                    </select>
                </td>
                <td>
                    <select id="positionCd">
                        <option value="none">==직위==</option>
                        ${positionOptions}
                    </select>
                </td>
                <td><i class="fa fa-trash delete-icon" style="cursor:pointer;"></i></td>
            `;
            autoLineSetTbody.appendChild(newRow);
            deleteIcon(newRow);
        })
        .catch(error => console.error("데이터 불러오기 실패:", error));
}

// 삭제 아이콘 클릭 시 해당 행 삭제
function deleteIcon(row){
    row.querySelector(".delete-icon").addEventListener("click", () => {
        row.remove();
        updateRowNumbers();
    });
}

// 순서 자동 업데이트 함수
function updateRowNumbers() {
    const rows = document.querySelectorAll("#autoLineSetTbody tr");
    rows.forEach((row, index) => {
        row.querySelector("td:first-child").textContent = index + 1;
    });
}

// 결재자 순서 바꾸기
let sortableInstance = null;
function changeApprovalLine(){
    const rows = document.querySelectorAll("#autoLineSetTbody tr");

    if (rows.length === 0) {
        showToast("결재자가 존재하지 않습니다.");
        return;
    }

    if (!sortableInstance) {
        sortableInstance = new Sortable(autoLineSetTbody, {
            animation: 150,
            handle: "td",
            onEnd: updateRowNumbers,
        });
         apprLineChangeBtn.innerHTML = "순서 변경 완료";
    } else {
        sortableInstance.destroy();
        sortableInstance = null;
		apprLineChangeBtn.innerHTML = `<i class="fa fa-sort"></i>&nbsp;순서 바꾸기`

    }
}

// 자동결재라인 저장
function saveApprovalLine(){
	let aprvlLineName = document.querySelector("#autoLineName").value;
	let docFrmNo = document.querySelector("#docFrmNo").value;
	
	let rows = document.querySelectorAll("#autoLineSetTbody tr");
	
	if(rows.length === 0){
		showToast("결재자가 존재하지 않습니다.");
		return;
	}

	// 결재선 목록을 배열로 수집
    let approvalLines = Array.from(rows).map(row => ({
        aprvlLineName: aprvlLineName,
        docFrmNo: docFrmNo,
        aprvlTurn: row.querySelector("#aprvlTurn").innerText.trim(),
        commCodeNo: row.querySelector("#commCodeNo").value,
        deptCd: row.querySelector("#deptCd").value,
        positionCd: row.querySelector("#positionCd").value
	}));
		
	axios.post(`${path}/approval/admin/apprLineAutoSave`,approvalLines)
		.then(resp => {
	        if (resp.status === 200) {
				alert("저장 완료")
	            console.log("저장 성공:", resp.data);
				setTimeout(() =>{
					window.location.href=`${path}/approval/admin/apprLineAutoList`
				},1500); 
	        } else {
	            console.warn("저장은 되었지만 예상과 다른 응답:", resp);
	        }
	    })
	    .catch(error => {
	        console.error("에러 발생:", error);
	        alert("저장 중 오류가 발생했습니다. 다시 시도해주세요.");
	    });
	
}	