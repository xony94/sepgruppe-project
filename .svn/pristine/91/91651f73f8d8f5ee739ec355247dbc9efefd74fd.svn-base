package kr.or.ddit.works.reservation.controller;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.security.RealUserWrapper;
import kr.or.ddit.works.reservation.service.ReservationService;
import kr.or.ddit.works.reservation.vo.MeetingRoomVO;
import kr.or.ddit.works.reservation.vo.ReservationVO;

/**
 * 회의실 컨트롤러
 * @author JYS
 * @since 2025. 3. 15.
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 15.     	JYS	          최초 생성
 *  2025. 3. 17.  		KKM  		  개발 중
 *
 * </pre>
 */
@Controller
@RequestMapping("/{companyNo}/reservation")
public class ReservationController {

    @Autowired
    private ReservationService reservationService;

    // 전체 예약 목록 및 오늘의 예약 현황 조회
    @GetMapping("/reservations")
    public String selectListAllReservation(@PathVariable("companyNo") String companyNo, Model model, HttpSession session) {
        String empId = (String) session.getAttribute("loggedInEmpId"); // 세션에서 로그인한 사원 ID 가져오기
        model.addAttribute("companyNo", companyNo); // companyNo 추가
        model.addAttribute("empId", empId); // 사원 ID를 모델에 추가
        LocalDate today = LocalDate.now();
        List<ReservationVO> todayReservations = reservationService.getReservationsByDate(today);
        model.addAttribute("todayReservations", todayReservations); // 오늘의 예약 현황 추가

        return "gw:reservation/reservationList"; // JSP 경로
    }

    // 예약 상세 조회
    @GetMapping("/reservations/{reservationNo}")
    public String selectReservationDetail(@PathVariable("reservationNo") String reservationNo, 
                                          @PathVariable("companyNo") String companyNo, 
                                          Model model) {
        ReservationVO reservation = reservationService.selectReservationDetail(reservationNo);
        model.addAttribute("reservation", reservation);
        model.addAttribute("companyNo", companyNo); // companyNo 추가
        return "gw:reservation/reservationDetail"; // 예약 상세 페이지
    }

    // 예약 등록 폼 UI
    @GetMapping("/reservations/new")
    public String insertReservationFormUI(@PathVariable("companyNo") String companyNo, Model model) {
        model.addAttribute("companyNo", companyNo); // companyNo 추가
        return "gw:reservation/reservationForm"; // 예약 추가 페이지
    }
    
    // 예약 등록
    @PostMapping("/reservations/new")
    public String insertReservation(ReservationVO reservation, 
                                    @PathVariable("companyNo") String companyNo, 
                                    Model model) {
        try {
            if (reservationService.insertReservation(reservation)) {
                return "redirect:/" + companyNo + "/reservation/reservations"; // 추가 후 예약 목록 페이지로 리다이렉트
            } else {
                model.addAttribute("error", "예약이 충돌했습니다."); // 오류 메시지 추가
                return "gw:reservation/reservationForm"; // 다시 추가 페이지로 리다이렉트
            }
        } catch (Exception e) {
            model.addAttribute("error", "예약 등록 중 오류가 발생했습니다."); // 예외 처리
            return "gw:reservation/reservationForm"; // 다시 추가 페이지로 리다이렉트
        }
    }

    // 수정 폼 UI
    @GetMapping("/reservations/{reservationNo}/edit")
    public String updateReservationFormUI(@PathVariable("reservationNo") String reservationNo, 
                                          @PathVariable("companyNo") String companyNo, 
                                          Model model) {
        ReservationVO reservation = reservationService.selectReservationDetail(reservationNo);
        model.addAttribute("reservation", reservation);
        model.addAttribute("companyNo", companyNo); // companyNo 추가
        return "gw:reservation/editReservation"; // 예약 수정 페이지
    }

    // 예약 수정
    @PostMapping("/reservations/{reservationNo}/edit")
    public String updateReservation(ReservationVO reservation, 
                                    @PathVariable("companyNo") String companyNo) {
        reservationService.updateReservation(reservation);
        return "redirect:/" + companyNo + "/reservation/reservations"; // 수정 후 예약 목록 페이지로 리다이렉트
    }

    // 예약 삭제
    @DeleteMapping("/reservations/{reservationNo}/delete")
    public String deleteReservation(@PathVariable("reservationNo") String reservationNo, 
                                    @PathVariable("companyNo") String companyNo) {
        reservationService.deleteReservation(reservationNo);
        return "redirect:/" + companyNo + "/reservation/reservations"; // 삭제 후 예약 목록 페이지로 리다이렉트
    }
    
    
    // 특정 날짜의 예약 현황 조회 (Grouped)
    @GetMapping("/reservations/{date}/grouped")
    public String getGroupedReservations(@PathVariable("date") String date,
                                         @PathVariable("companyNo") String companyNo,
                                         Model model) {
        // 날짜 파싱
        LocalDate reservationDate;
        if ("today".equalsIgnoreCase(date)) {
            reservationDate = LocalDate.now();
        } else {
            reservationDate = LocalDate.parse(date);
        }

        // 날짜 형식 지정
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String currentDate = reservationDate.format(formatter);
        String prevDate = reservationDate.minusDays(1).format(formatter);
        String nextDate = reservationDate.plusDays(1).format(formatter);

        // 예약 데이터 조회
        List<ReservationVO> reservations = reservationService.getReservationsByDate(reservationDate);

        // 데이터 가공
        Map<Long, Map<String, String>> schedule = new LinkedHashMap<>();
        for (ReservationVO reservation : reservations) {
            long roomNo = reservation.getRoomNo();
            LocalTime startTime = reservation.getReservationStartTime().toLocalDateTime().toLocalTime();
            LocalTime endTime = reservation.getReservationEndTime().toLocalDateTime().toLocalTime();
            String empId = reservation.getEmpId();

            schedule.putIfAbsent(roomNo, new LinkedHashMap<>());
            for (LocalTime time = startTime; time.isBefore(endTime); time = time.plusHours(1)) {
                String timeKey = time.toString();
                schedule.get(roomNo).put(timeKey, empId);
            }
        }

        // 모델에 데이터 추가
        model.addAttribute("schedule", schedule);
        model.addAttribute("currentDate", currentDate); // 문자열로 전달
        model.addAttribute("prevDate", prevDate);       // 문자열로 전달
        model.addAttribute("nextDate", nextDate);       // 문자열로 전달
        model.addAttribute("companyNo", companyNo);

        return "gw:reservation/reservationList";
    }


	    // 로그인한 사용자의 예약 현황 조회
	    @GetMapping("/reservations/my-reservations")
	    public String getMyReservations(@PathVariable("companyNo") String companyNo, Model model) {
	        // 로그인한 사용자 정보 가져오기
	        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	        Object principal = authentication.getPrincipal();
	        String empId = null;

	        if (principal instanceof RealUserWrapper) {
	            empId = ((RealUserWrapper) principal).getRealUser().getUserId();
	        }

	        if (empId == null) {
	            return "redirect:/login"; // 예시
	        }

	        model.addAttribute("companyNo", companyNo);
	        model.addAttribute("empId", empId); // 사원 ID를 모델에 추가

	        // 사용자의 예약 내역 가져오기
	        List<ReservationVO> myReservations = reservationService.getMyReservationsByEmpId(empId);
	        model.addAttribute("myReservations", myReservations); // 모델에 예약 내역 추가

	        return "gw:reservation/reservationList"; // JSP 경로
	    }
	
	    /** 관리자 회의실 목록 조회 */
	    @GetMapping("")
	    public String selectListAllRoom(@PathVariable("companyNo") String companyNo, Model model) {
	        // 모든 회의실 정보 조회
	        List<MeetingRoomVO> meetingRooms = reservationService.selectListAllRoom();
	        model.addAttribute("meetingRooms", meetingRooms);
	        model.addAttribute("companyNo", companyNo); // companyNo 추가
	        return "gw:reservation/meetingroomList"; // 회의실 목록 페이지
	    }

	    /** 관리자 회의실 상세 조회 */
	    @GetMapping("/meetingroom/{roomNo}")
	    public String selectRoomDetail(@PathVariable("roomNo") long roomNo, 
	                                    @PathVariable("companyNo") String companyNo, 
	                                    Model model) {
	        MeetingRoomVO roomDetail = reservationService.selectRoomDetail(roomNo);
	        model.addAttribute("roomDetail", roomDetail);
	        model.addAttribute("companyNo", companyNo); // companyNo 추가
	        return "gw:reservation/meetingroomDetail"; // 회의실 상세 페이지
	    }

	    /** 관리자 회의실 등록 */
	    @PostMapping("")
	    public String insertRoom(@PathVariable("companyNo") String companyNo,
	                             @RequestParam String roomNm,
	                             @RequestParam String roomLocation,
	                             @RequestParam String roomAvailability,
	                             @RequestParam long roomCapacity,
	                             Model model) {
	        MeetingRoomVO meetingRoom = new MeetingRoomVO();
	        meetingRoom.setRoomNm(roomNm);
	        meetingRoom.setRoomLocation(roomLocation);
	        meetingRoom.setRoomAvailability(roomAvailability);
	        meetingRoom.setRoomCapacity(roomCapacity);

	        // 회의실 등록 로직
	        reservationService.insertRoom(meetingRoom);

	        // 회의실 목록을 다시 조회하여 모델에 추가
	        List<MeetingRoomVO> meetingRooms = reservationService.selectListAllRoom(); // 모든 회의실 조회
	        model.addAttribute("meetingRooms", meetingRooms);
	        model.addAttribute("companyNo", companyNo); // companyNo 추가

	        return "gw:reservation/meetingroomList"; // JSP 경로
	    }

	    /** 관리자 - 회의실 수정 폼 이동 */
	    @GetMapping("/meetingroom/{roomNo}/edit")
	    public String updateRoomFormUI(@PathVariable("roomNo") long roomNo, 
	                                     @PathVariable("companyNo") String companyNo, 
	                                     Model model) {
	        MeetingRoomVO roomDetail = reservationService.selectRoomDetail(roomNo);
	        model.addAttribute("roomDetail", roomDetail);
	        model.addAttribute("companyNo", companyNo); // companyNo 추가
	        return "meetingroom/meetingroomEdit"; // 회의실 수정 폼
	    }

	    /** 관리자 - 회의실 수정 */
	    @PostMapping("/meetingroom/{roomNo}/edit")
	    public String updateRoom(@PathVariable("roomNo") long roomNo,
	                             @PathVariable("companyNo") String companyNo,
	                             @RequestParam String roomNm,
	                             @RequestParam String roomLocation,
	                             @RequestParam String roomAvailability,
	                             @RequestParam long roomCapacity) {
	        MeetingRoomVO meetingRoom = new MeetingRoomVO();
	        meetingRoom.setRoomNo(roomNo);
	        meetingRoom.setRoomNm(roomNm);
	        meetingRoom.setRoomLocation(roomLocation);
	        meetingRoom.setRoomAvailability(roomAvailability);
	        meetingRoom.setRoomCapacity(roomCapacity);

	        reservationService.updateRoom(meetingRoom); // 회의실 수정 로직
	        return "redirect:/" + companyNo + "/reservation/meetingroom/" + roomNo; // 수정 후 해당 회의실 상세 페이지로 리다이렉트
	    }

	    /** 관리자 - 회의실 삭제 */
	    @DeleteMapping("/meetingroom/{roomNo}/delete")
	    public String deleteRoom(@PathVariable("roomNo") long roomNo,
	                             @PathVariable("companyNo") String companyNo) {
	        reservationService.deleteRoom(roomNo); // 회의실 삭제 로직
	        return "redirect:/" + companyNo + "/reservation"; // 삭제 후 회의실 목록 페이지로 리다이렉트
	    }

	    // POST 요청을 DELETE로 변환
	    @PostMapping("/meetingroom/{roomNo}/delete")
	    public String deleteRoomViaPost(@PathVariable("roomNo") long roomNo, 
	                                     @PathVariable("companyNo") String companyNo) {
	        return deleteRoom(roomNo, companyNo); // 실제 삭제 로직 호출
	    }
}