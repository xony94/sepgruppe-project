package kr.or.ddit.works.approval.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.works.approval.service.ApprDocService;
import kr.or.ddit.works.approval.vo.DocFolderVO;
import kr.or.ddit.works.approval.vo.DocFormVO;
import kr.or.ddit.works.common.vo.AttachFileGroupVO;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@Controller
@RequestMapping("/{companyNo}/approval")
public class ApprDocController {
	
	@Autowired
	private ApprDocService apprDocService;
	
	/**
	 * 전체 결재 양식 조회
	 * @param companyNo
	 * @param model
	 * @return
	 */
	@GetMapping("")
	public String selectListAllDocForm(
		@Param("companyNo")String companyNo
		, Model model
	) {
		model.addAttribute("companyNo", companyNo);
		return "";
	}
	
	/**
	 * 모달 내에서 전체 결재 양식 조회
	 * @param companyNo
	 * @param model
	 * @return
	 */
	@GetMapping("/allDocuments")
	@ResponseBody
	public Map<String, Map<String, List<DocFormVO>>> selectModalAllDocForm(
		@PathVariable("companyNo")String companyNo

	) {
		// 결재 양식과 저장된 폴더 조회
		List<DocFormVO> documents = apprDocService.selectListAllDocForm();
		log.info("documents : {}",documents);
		
		// 모든 폴더 코드를 코드명과 맵핑
		Map<String, String> folderNameMap = new HashMap<>();
		for(DocFormVO doc : documents) {
			// 각 양식의 폴더 정보
			DocFolderVO folder = doc.getDocFolderVo();
			if(folder != null) {
				folderNameMap.put(folder.getDocFolderNo() , folder.getDocFolderName());
			}
		}
		
		// 각 문서 그룹화
		Map<String, Map<String, List<DocFormVO>>> folderDoc = new HashMap<>();
		
		for(DocFormVO doc : documents) {
			DocFolderVO folder = doc.getDocFolderVo();
			if (folder == null) continue;	// 폴더 정보가 없으면 다음 문서 실행
			
			// 상위 폴더 코드를 코드명으로 변환
			String parentFolderName = folderNameMap.getOrDefault(folder.getParentDocFolder(), "알 수 없는 폴더");
			// 문서가 저장된  폴더명 조회
			String folderName = folder.getDocFolderName();
			// 상위 폴더가 존재하지 않으면 추가
		    folderDoc.putIfAbsent(parentFolderName, new HashMap<>());
		    // 하위 폴더가 존재하지 않으면 추가
		    folderDoc.get(parentFolderName).putIfAbsent(folderName, new ArrayList<>());
			// 해당 하위 폴더에 문서 추가
			folderDoc.get(parentFolderName).get(folderName).add(doc);
		}
		
		return folderDoc;
	}
	

	/**
	 * 
	 * @param companyNo
	 * @param docFrmName
	 * @param model
	 * @return
	 */
	@PostMapping("")
	public String selectListSearchDocForm(
		@Param("companyNo")String companyNo
		, @Param("docFrmName") String docFrmName
		, Model model
	) {
		model.addAttribute("companyNo", companyNo);
		model.addAttribute("docFrmName", docFrmName);
		
		return "";
	}
	
	/**
	 * 문서 상세 조회
	 * @param docFrmNo
	 * @param model
	 */
	public void selectdocFrmDeatil(
		@RequestParam("docFrmNo")String docFrmNo
		, Model model
	){
		DocFormVO formDetail = apprDocService.selectdocFrmDeatil(docFrmNo);
		
	}
	
	

}
