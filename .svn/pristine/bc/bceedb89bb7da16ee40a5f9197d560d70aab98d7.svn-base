<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.works.mybatis.mappers.ProjectMapper">
	
	 <resultMap id="projectResultMap" type="kr.or.ddit.works.project.vo.ProjectVO">
        <id property="projectNo" column="project_no"/>
        <result property="empId" column="emp_id"/>
        <result property="projectTitle" column="project_title"/>
        <result property="projectStartTime" column="project_start_time"/>
        <result property="projectEndTime" column="project_end_time"/>
        <result property="projectStatus" column="project_status"/>
        <result property="projectDesc" column="project_desc"/>
        <result property="empNm" column="emp_nm"/>
    </resultMap>
	
	<!-- 프로젝트 목록 조회 -->
    <select id="selectListAllProject" parameterType="String" resultType="kr.or.ddit.works.project.vo.ProjectVO">
        SELECT 
            PROJECT_NO, 
            EMP_ID, 
            PROJECT_TITLE, 
            PROJECT_START_TIME AS PROJECT_START_TIME, 
            PROJECT_END_TIME AS PROJECT_END_TIME, 
            PROJECT_STATUS, 
            PROJECT_DESC 
        FROM 
            PROJECT  -- 실제 테이블 이름
        WHERE 
            EMP_ID = #{empId}  -- 사용자의 ID로 필터링
        ORDER BY 
            PROJECT_START_TIME  -- 시작일 기준으로 정렬
    </select>
    
    <!-- 프로젝트 상세 조회 -->
    <select id="selectProjectDetail" resultType="kr.or.ddit.works.project.vo.ProjectVO">
        SELECT 
            p.PROJECT_NO, 
            p.PROJECT_TITLE, 
            p.PROJECT_START_TIME, 
            p.PROJECT_END_TIME, 
            p.PROJECT_STATUS, 
            p.PROJECT_DESC,
            pp.EMP_ID, 
            e.EMP_NM, 
            t.TASK_NO, 
            t.TASK_TITLE, 
            t.PROGRESS, 
            t.PRIORITY
        FROM 
            PROJECT p
        LEFT JOIN 
            PROJECT_PARTICIPANT pp ON p.PROJECT_NO = pp.PROJECT_NO
        LEFT JOIN 
            EMPLOYEE e ON pp.EMP_ID = e.EMP_ID
        LEFT JOIN 
            TASK t ON pp.PROJECT_NO = t.PROJECT_NO
        WHERE 
            p.PROJECT_NO = #{projectNo}
    </select>

    <!-- 프로젝트 생성 -->
	<insert id="insertProject" parameterType="kr.or.ddit.works.project.vo.ProjectVO" useGeneratedKeys="true" keyProperty="projectNo" keyColumn="project_no">
	    INSERT INTO project (
	        project_no,               -- 키는 자동으로 생성됨
	        emp_id,
	        project_title,
	        project_start_time,
	        project_end_time,
	        project_status,
	        project_desc
	    ) VALUES (
	        project_seq.NEXTVAL,     -- 자동 생성된 시퀀스 값
	        #{empId},
	        #{projectTitle},
	        #{projectStartTime},
	        #{projectEndTime},
	        #{projectStatus},
	        #{projectDesc}
	    )
	</insert>

    <!-- 프로젝트 참여자 추가 -->
	<insert id="insertParticipant" parameterType="kr.or.ddit.works.project.vo.ProjectVO$Participant">
	    INSERT INTO project_participant (project_no, emp_id)
	    VALUES (#{projectNo}, #{empId})
	</insert>

    <!-- 여러 프로젝트 참여자 추가 -->
	<insert id="insertParticipants" parameterType="list">
	    <foreach collection="list" item="participant" index="index" open="(" separator="),(" close=")">
	        #{participant.projectNo}, #{participant.empId}
	    </foreach>
	</insert>

    <!-- 전체 사원 조회 -->
    <select id="selectListAllEmployee" parameterType="String" resultType="kr.or.ddit.works.organization.vo.EmployeeVO">
        SELECT 
            emp_id,
            emp_no,
            emp_nm,
            position_cd,
            dept_cd,
            emp_pw,
            emp_zip,
            emp_add1,
            emp_add2,
            emp_email,
            emp_phone,
            emp_regdate,
            emp_retire,
            emp_img,
            emp_bank,
            emp_depositor,
            emp_bankno,
            emp_gender
        FROM EMPLOYEE
        WHERE company_no = #{companyNo}
    </select>
    
</mapper>
	
	

	
