package kr.or.ddit.works.survey.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.works.survey.vo.SurveyVO;

/**
 * 
 * @author SJH
 * @since 2025. 3. 24.
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 *  2025. 3. 24.     	SJH	          최초 생성
 *
 * </pre>
 */
@Controller
@RequestMapping("/{companyNo}/surveyApi")
public class SurveyProxyController {

    private static final String ACCESS_TOKEN = "LXs5ovMHyr4wSkLSS8XATbigcAhdK2MRdFnrpPtm8HGc0Z7yFQ6pzAMtSeY1swdDNxsOHhfU0xmu7yvo-m5Irkc0s6ZJsoYnhkAc-w22lNM6EcI7mxUD9p0MD-7owmfv";
    private static final String SURVEY_MONKEY_URL = "https://api.surveymonkey.com/v3/surveys";

    // ✅ 설문 목록 조회
    @GetMapping("/surveys")
    public ResponseEntity<String> getSurveys() {
        try (CloseableHttpClient client = HttpClients.createDefault()) {
            HttpGet get = new HttpGet(SURVEY_MONKEY_URL);
            get.setHeader(	"Authorization", "Bearer " + ACCESS_TOKEN);
            get.setHeader("Content-Type", "application/json");

            try (CloseableHttpResponse response = client.execute(get)) {
                int status = response.getStatusLine().getStatusCode();
                String body = EntityUtils.toString(response.getEntity(), "UTF-8");

                if (status >= 200 && status < 300) {
                    return ResponseEntity.ok(body);
                } else {
                    return ResponseEntity.status(status).body("API 오류: " + body);
                }
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("오류 발생: " + e.getMessage());
        }
    }

 // ✅ JSP에서 사용하기 위한 설문 리스트 조회
    @GetMapping("/list")
    public String getSurveyListFromApi(Model model, @PathVariable("companyNo") String companyNo) {
        try (CloseableHttpClient client = HttpClients.createDefault()) {
            HttpGet get = new HttpGet(SURVEY_MONKEY_URL);
            get.setHeader("Authorization", "Bearer " + ACCESS_TOKEN);
            get.setHeader("Content-Type", "application/json");
            
            try (CloseableHttpResponse response = client.execute(get)) {
                String body = EntityUtils.toString(response.getEntity(), "UTF-8");

                // ⛔ 기존: Map 리스트
//                ObjectMapper mapper = new ObjectMapper();
//                JsonNode root = mapper.readTree(body);
//                List<Map<String, String>> surveyList = new ArrayList<>();
    //
//                for (JsonNode item : root.path("data")) {
//                    Map<String, String> survey = new HashMap<>();
//                    survey.put("id", item.get("id").asText());
//                    survey.put("title", item.get("title").asText());
//                    surveyList.add(survey);
//                }

                // ✅ 수정: SurveyVO 리스트
                ObjectMapper mapper = new ObjectMapper();
                JsonNode root = mapper.readTree(body);
                List<SurveyVO> surveyList = new ArrayList<>();

                for (JsonNode item : root.path("data")) {
                    SurveyVO survey = new SurveyVO();
                    survey.setSurveyId(item.get("id").asText());
                    survey.setTitle(item.get("title").asText());
                    surveyList.add(survey);
                }
                model.addAttribute("companyNo", companyNo);
                model.addAttribute("surveyList", surveyList);
                return "gw:survey/surveyList";
            }
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", "SurveyMonkey API 조회 실패: " + e.getMessage());
            return "error";
        }
    }

    // ✅ 설문 생성 (surveyCreate)
    @PostMapping("/surveyCreate")
    public ResponseEntity<?> surveyCreate(Model model,@RequestBody String jsonBody, @PathVariable("companyNo") String companyNo) {
        try (CloseableHttpClient client = HttpClients.createDefault()) {
            HttpPost post = new HttpPost(SURVEY_MONKEY_URL);
            post.setHeader("Authorization", "Bearer " + ACCESS_TOKEN);
            post.setHeader("Content-Type", "application/json");
            post.setEntity(new StringEntity(jsonBody, "UTF-8"));

            try (CloseableHttpResponse response = client.execute(post)) {
                int status = response.getStatusLine().getStatusCode();
                String responseBody = EntityUtils.toString(response.getEntity(), "UTF-8");

                if (status >= 200 && status < 300) {
                    return ResponseEntity.ok(responseBody);
                } else {
                    return ResponseEntity.status(status)
                            .body(Collections.singletonMap("error", "API 오류: " + responseBody));
                }
            }
        } catch (Exception e) {
        	model.addAttribute("companyNo", companyNo);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Collections.singletonMap("error", e.getMessage()));
        }
    }
}
