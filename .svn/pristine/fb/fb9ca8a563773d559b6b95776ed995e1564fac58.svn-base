<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.works.mybatis.mappers.ChatMapper">

<select id="selectChatRoomUser">
	SELECT
	    USER_ID
	  , ROOM_ID
	  , EMP_ID
	  , JOIN_TIME
	  , ROLE
	FROM
	    CHAT_ROOM_USER
	WHERE ROOM_ID = #{roomId}
</select>
<!-- 채팅방 저장 -->
<insert id="insertChatRoom">
	INSERT INTO CHAT_ROOM (
	    ROOM_ID
	    , ROOM_NAME
	    , CREATE_EMP_ID
	    , ROOM_CREATE_DATE
	    , ROOM_TYPE
	) VALUES (
	    #{roomId}
	  , #{roomName}
	  , #{createEmpId}
	  , #{roomCreateDate}
	  , #{roomType}
	)
</insert>

<delete id="deleteChatRoom">
	DELETE FROM CHAT_ROOM
WHERE
        ROOM_ID = #{roomId}
</delete>

<delete id="deleteChatRoomUser">
	DELETE FROM CHAT_ROOM_USER
	WHERE
	    ROOM_ID = #{roomId}
	    AND EMP_ID = #{empId}
</delete>

<!-- 채팅방 참여자 저장 -->
<insert id="insertChatRoomUser">
	<selectKey keyProperty="userId" resultType="string"
		order="BEFORE">
		SELECT SEQ_CHAT_ROOM_USER.NEXTVAL FROM DUAL
	</selectKey>
	INSERT INTO CHAT_ROOM_USER (
	    USER_ID
	    , ROOM_ID
	    , EMP_ID
	    , JOIN_TIME
	    , ROLE
	) VALUES (
	    #{userId}
	  , #{roomId}
	  , #{empId}
	  , #{joinTime}
	  , #{role}
	)
</insert>

<!-- 메시지 저장 -->
<insert id="insertMessage">
	INSERT INTO MESSAGE (
	    MSG_ID
	    , ROOM_ID
	    , SENDER_EMP_ID
	    , MSG_CONTENT
	    , SEND_TIME
	    , SEND_DATE
	) VALUES (
	    #{msgId}
	  , #{roomId}
	  , #{senderEmpId} 
	  , #{msgContent} 
	  , #{sendTime}
	  , SYSDATE
	)
</insert>

<resultMap id="roomUserMap" type="ChatRoomUserVO" autoMapping="true">
	<association property="chatRoom" javaType="ChatRoomVO" autoMapping="true">
		<association property="message" javaType="MessageVO" autoMapping="true"></association>
	</association>
</resultMap>

<!-- 내 채팅방 목록 -->
<select id="selectListAllChatRoom" resultMap="roomUserMap">
    SELECT
	    cru.USER_ID,
	    cru.ROOM_ID,
	    cr.ROOM_NAME,
	    cru.EMP_ID,
	    cru.JOIN_TIME,
	
	    m.MSG_ID,
	    m.SENDER_EMP_ID,
	    m.MSG_CONTENT,
	    m.SEND_DATE,
	    m.SEND_TIME
	
	FROM
	    CHAT_ROOM_USER cru
	JOIN
	    CHAT_ROOM cr ON cru.ROOM_ID = cr.ROOM_ID
	LEFT JOIN (
	    SELECT *
	    FROM (
	        SELECT 
	            m.*,
	            ROW_NUMBER() OVER (PARTITION BY ROOM_ID ORDER BY SEND_DATE DESC, SEND_TIME DESC) AS rn
	        FROM MESSAGE m
	    )
	    WHERE rn = 1
	) m ON cr.ROOM_ID = m.ROOM_ID
	WHERE cru.EMP_ID = #{empId}
</select>

<resultMap id="messageMap" type="MessageVO" autoMapping="true">
	<association property="organization" javaType="OrganizationVO" autoMapping="true"></association>
	<association property="chatRoom" javaType="ChatRoomVO" autoMapping="true"></association>
</resultMap>

<!-- 채팅방 메시지 불러오기 -->
<select id="findAllMessageByRoomId" resultMap="messageMap">
	SELECT 
	    M.MSG_ID,
	    M.ROOM_ID,
	    M.SENDER_EMP_ID,
	    M.MSG_CONTENT,
	    M.SEND_TIME,
	    M.SEND_DATE,
	    O.EMP_NM,
	    O.DEPT_NAME,
	    O.POSITION_NAME
	FROM 
	    MESSAGE M
	LEFT JOIN 
	    ORGANIZATION O ON M.SENDER_EMP_ID = O.EMP_ID
	WHERE 
	    M.ROOM_ID = #{roomId}
	ORDER BY 
	    M.SEND_DATE ASC,   
	    M.SEND_TIME ASC   
</select>

</mapper>
