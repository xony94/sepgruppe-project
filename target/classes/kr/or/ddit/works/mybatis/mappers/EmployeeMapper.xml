<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.works.mybatis.mappers.EmployeeMapper">
	<sql id="searchFragForPaging">
    <trim prefix="WHERE" prefixOverrides="AND | OR">
    	<if test="companyNo != null and companyNo != ''">
        	company_no = #{companyNo}
        </if>
        <if test="simple.searchType != null and simple.searchWord != null and simple.searchWord != ''">
            <choose>
                <when test="simple.searchType == 'empNm'">
                    AND emp_nm LIKE '%' || #{simple.searchWord} || '%'
                </when>
                <when test="simple.searchType == 'deptName'">
		          	AND dept_name LIKE '%' || #{simple.searchWord} || '%'
		        </when>
		        <when test="simple.searchType == 'positionName'">
		         	AND position_name LIKE '%' || #{simple.searchWord} || '%'
		        </when>
            </choose>
        </if>
    </trim>
</sql>
	<sql id="searchFragForCount">
    <trim prefix="WHERE" prefixOverrides="AND | OR">
        company_no = #{companyNo}
        <if test="simple.searchType != null and simple.searchWord != null and simple.searchWord != ''">
            <choose>
                <when test="simple.searchType == 'empNm'">
                    AND emp_nm LIKE '%' || #{simple.searchWord} || '%'
                </when>
                <when test="simple.searchType == 'deptName'">
		          	AND dept_name LIKE '%' || #{simple.searchWord} || '%'
		        </when>
		        <when test="simple.searchType == 'positionName'">
		         	AND position_name LIKE '%' || #{simple.searchWord} || '%'
		        </when>
            </choose>
        </if>
    </trim>
</sql>

    <!-- 마이페이지 정보 수정 -->
    <update id="updateEmployee">
        UPDATE EMPLOYEE
        SET
        	<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(empPw)">
	        EMP_PW = #{empPw,jdbcType=VARCHAR},
	        </if>
              EMP_ZIP = #{empZip,jdbcType=VARCHAR}
            , EMP_ADD1 = #{empAdd1,jdbcType=VARCHAR}
            , EMP_ADD2 = #{empAdd2,jdbcType=VARCHAR}
            , EMP_EMAIL = #{empEmail,jdbcType=VARCHAR}
            , EMP_PHONE = #{empPhone,jdbcType=VARCHAR}
            <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(empImg)">
            , EMP_IMG = #{empImg,jdbcType=VARCHAR}
            </if>
        WHERE EMP_ID = #{empId,jdbcType=VARCHAR}
    </update>
    
    <!-- 사원(들) 직위 변경 -->
    <update id="updateEmployeesPosition">
	    UPDATE EMPLOYEE
	    SET POSITION_CD = #{positionCd}
	    WHERE EMP_ID IN
	    <foreach collection="empIds" item="id" open="(" separator="," close=")">
	        #{id}
	    </foreach>
	</update>
	
	<!-- 사원(들) 부서 변경 -->
	<update id="updateEmployeesDepartment">
	    UPDATE EMPLOYEE
	    SET DEPT_CD = #{deptCd}
	    WHERE EMP_ID IN
	    <foreach collection="empIds" item="id" open="(" separator="," close=")">
	        #{id}
	    </foreach>
	</update>
    
    <!-- 부서 업데이트 -->
    <update id="updateDeptCd">
	    UPDATE employee
	    SET dept_cd = #{deptCd}
	    WHERE emp_id = #{empId}
	</update>
	
	<!-- 기존 부서장 부서코드 제거 -->
	<update id="clearDeptCd">
	    UPDATE employee
	    SET dept_cd = NULL
	    WHERE emp_id = #{empId}
	</update>
	
	<!-- 사원(들) 삭제 -->
	<delete id="deleteEmployees">
	    DELETE FROM EMPLOYEE
	    WHERE EMP_ID IN
	    <foreach collection="empIds" item="empId" open="(" separator="," close=")">
	        #{empId}
	    </foreach>
	    AND COMPANY_NO = #{companyNo}
	</delete>

    <!-- 회원정보 조회 -->
    <select id="selectEmployee">
        SELECT
            e.EMP_ID,
	        e.COMPANY_NO,
	        e.POSITION_CD,
	        p.POSITION_NAME,  <!-- 추가: 직책 이름 가져오기 -->
	        e.DEPT_CD,
	        d.DEPT_NAME,
	        e.EMP_NO,
	        e.EMP_NM,
	        e.EMP_PW,
	        e.EMP_ZIP,
	        e.EMP_ADD1,
	        e.EMP_ADD2,
	        e.EMP_EMAIL,
	        e.EMP_PHONE,
	        TO_CHAR(e.EMP_REGDATE, 'YYYY-MM-DD') AS EMP_REGDATE,
	        e.EMP_RETIRE,
	        e.EMP_IMG,
	        e.EMP_BANK,
	        e.EMP_DEPOSITOR,
	        e.EMP_BANKNO,
	        e.EMP_GENDER
	    FROM EMPLOYEE e
	    LEFT OUTER JOIN POSITION p ON e.POSITION_CD = p.POSITION_CD
	    LEFT OUTER JOIN DEPARTMENT d ON e.DEPT_CD = d.DEPT_CD
	    WHERE e.EMP_ID = #{empId,jdbcType=VARCHAR}
    </select>
	
	<!-- 전체 사원 조회 (페이징 적용) -->
    <select id="selectAllEmployees" resultType="OrganizationVO">
	  SELECT * FROM (
		    SELECT
		        t.*,
		        ROW_NUMBER() OVER (ORDER BY emp_no DESC) AS rnum
		    FROM (
		        SELECT DISTINCT
		            emp_id,
		            emp_no,
		            emp_nm,
		            dept_name,
		            position_name,
		            emp_email
		        FROM ORGANIZATION
		        <include refid="searchFragForPaging"/>
		    ) t
		)
		WHERE rnum BETWEEN #{paging.startRow} AND #{paging.endRow}
    </select>

    <!-- 전체 사원 수 조회 -->
    <select id="countAllEmployees" resultType="int">
        SELECT DISTINCT COUNT(*) 
        FROM ORGANIZATION
        <include refid="searchFragForCount"/>
    </select>
    <!-- 활동 중인 사원 수 (퇴사하지 않은 사원만) -->
    <select id="countActiveEmployees" resultType="int">
	  SELECT DISTINCT COUNT(*) 
	  FROM ORGANIZATION
	  WHERE emp_retire IS NULL 
	  	AND company_no = #{companyNo}
	</select>
	
	<!-- 마이페이지 이미지 삭제 -->
	<update id="deleteImage">
		UPDATE
			EMPLOYEE
		SET
			EMP_IMG = NULL
		WHERE
			EMP_ID = #{empId,jdbcType=VARCHAR}
	</update>
	
	<insert id="insertEmployee">
		INSERT INTO EMPLOYEE (
		    EMP_ID
		    , COMPANY_NO
		    , POSITION_CD
		    , DEPT_CD
		    , EMP_NO
		    , EMP_NM
		    , EMP_PW
		    , EMP_ZIP
		    , EMP_ADD1
		    , EMP_ADD2
		    , EMP_EMAIL
		    , EMP_PHONE
		    , EMP_REGDATE
		    , EMP_RETIRE
		    , EMP_IMG
		    , EMP_BANK
		    , EMP_DEPOSITOR
		    , EMP_BANKNO
		    , EMP_GENDER
		) VALUES (
		  #{empId}
		  , #{companyNo} 
		  , #{positionCd} 
		  , #{deptCd} 
		  , #{empNo} 
		  , #{empNm} 
		  , #{empPw} 
		  , #{empZip} 
		  , #{empAdd1} 
		  , #{empAdd2} 
		  , #{empEmail} 
		  , #{empPhone} 
		  , TRUNC(SYSDATE) 
		  , #{empRetire} 
		  , #{empImg} 
		  , #{empBank} 
		  , #{empDepositor} 
		  , #{empBankno}
		  , #{empGender}
		)
	</insert>
	
	<select id="selectLastEmpNo" resultType="String">
	    SELECT MAX(emp_no) 
	    FROM employee 
	    WHERE company_no = #{companyNo}
	    AND emp_no != 'E000'
	</select>
	
	 <select id="selectDepartments" resultType="kr.or.ddit.works.organization.vo.DepartmentVO">
    SELECT 
        dept_cd, 
        dept_name, 
        parent_dept_cd, 
        manager_emp_id, 
        TO_CHAR(create_at, 'YYYY-MM-DD') AS createAt, 
        company_no
    FROM 
        department
    WHERE 
        company_no = #{companyNo}
        AND parent_dept_cd IS NOT NULL
    ORDER BY 
        dept_cd 
  </select>
</mapper>
